// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: executor.proto

package tipb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ExecType int32

const (
	ExecType_TypeTableScan          ExecType = 0
	ExecType_TypeIndexScan          ExecType = 1
	ExecType_TypeSelection          ExecType = 2
	ExecType_TypeAggregation        ExecType = 3
	ExecType_TypeTopN               ExecType = 4
	ExecType_TypeLimit              ExecType = 5
	ExecType_TypeStreamAgg          ExecType = 6
	ExecType_TypeJoin               ExecType = 7
	ExecType_TypeKill               ExecType = 8
	ExecType_TypeExchangeSender     ExecType = 9
	ExecType_TypeExchangeReceiver   ExecType = 10
	ExecType_TypeProjection         ExecType = 11
	ExecType_TypePartitionTableScan ExecType = 12
	ExecType_TypeSort               ExecType = 13
	ExecType_TypeWindow             ExecType = 14
)

var ExecType_name = map[int32]string{
	0:  "TypeTableScan",
	1:  "TypeIndexScan",
	2:  "TypeSelection",
	3:  "TypeAggregation",
	4:  "TypeTopN",
	5:  "TypeLimit",
	6:  "TypeStreamAgg",
	7:  "TypeJoin",
	8:  "TypeKill",
	9:  "TypeExchangeSender",
	10: "TypeExchangeReceiver",
	11: "TypeProjection",
	12: "TypePartitionTableScan",
	13: "TypeSort",
	14: "TypeWindow",
}

var ExecType_value = map[string]int32{
	"TypeTableScan":          0,
	"TypeIndexScan":          1,
	"TypeSelection":          2,
	"TypeAggregation":        3,
	"TypeTopN":               4,
	"TypeLimit":              5,
	"TypeStreamAgg":          6,
	"TypeJoin":               7,
	"TypeKill":               8,
	"TypeExchangeSender":     9,
	"TypeExchangeReceiver":   10,
	"TypeProjection":         11,
	"TypePartitionTableScan": 12,
	"TypeSort":               13,
	"TypeWindow":             14,
}

func (x ExecType) Enum() *ExecType {
	p := new(ExecType)
	*p = x
	return p
}

func (x ExecType) String() string {
	return proto.EnumName(ExecType_name, int32(x))
}

func (x *ExecType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExecType_value, data, "ExecType")
	if err != nil {
		return err
	}
	*x = ExecType(value)
	return nil
}

func (ExecType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{0}
}

type ExchangeType int32

const (
	ExchangeType_PassThrough ExchangeType = 0
	ExchangeType_Broadcast   ExchangeType = 1
	ExchangeType_Hash        ExchangeType = 2
)

var ExchangeType_name = map[int32]string{
	0: "PassThrough",
	1: "Broadcast",
	2: "Hash",
}

var ExchangeType_value = map[string]int32{
	"PassThrough": 0,
	"Broadcast":   1,
	"Hash":        2,
}

func (x ExchangeType) Enum() *ExchangeType {
	p := new(ExchangeType)
	*p = x
	return p
}

func (x ExchangeType) String() string {
	return proto.EnumName(ExchangeType_name, int32(x))
}

func (x *ExchangeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ExchangeType_value, data, "ExchangeType")
	if err != nil {
		return err
	}
	*x = ExchangeType(value)
	return nil
}

func (ExchangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{1}
}

type EngineType int32

const (
	EngineType_Local   EngineType = 0
	EngineType_TiKV    EngineType = 1
	EngineType_TiFlash EngineType = 2
)

var EngineType_name = map[int32]string{
	0: "Local",
	1: "TiKV",
	2: "TiFlash",
}

var EngineType_value = map[string]int32{
	"Local":   0,
	"TiKV":    1,
	"TiFlash": 2,
}

func (x EngineType) Enum() *EngineType {
	p := new(EngineType)
	*p = x
	return p
}

func (x EngineType) String() string {
	return proto.EnumName(EngineType_name, int32(x))
}

func (x *EngineType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EngineType_value, data, "EngineType")
	if err != nil {
		return err
	}
	*x = EngineType(value)
	return nil
}

func (EngineType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{2}
}

type JoinType int32

const (
	JoinType_TypeInnerJoin             JoinType = 0
	JoinType_TypeLeftOuterJoin         JoinType = 1
	JoinType_TypeRightOuterJoin        JoinType = 2
	JoinType_TypeSemiJoin              JoinType = 3
	JoinType_TypeAntiSemiJoin          JoinType = 4
	JoinType_TypeLeftOuterSemiJoin     JoinType = 5
	JoinType_TypeAntiLeftOuterSemiJoin JoinType = 6
)

var JoinType_name = map[int32]string{
	0: "TypeInnerJoin",
	1: "TypeLeftOuterJoin",
	2: "TypeRightOuterJoin",
	3: "TypeSemiJoin",
	4: "TypeAntiSemiJoin",
	5: "TypeLeftOuterSemiJoin",
	6: "TypeAntiLeftOuterSemiJoin",
}

var JoinType_value = map[string]int32{
	"TypeInnerJoin":             0,
	"TypeLeftOuterJoin":         1,
	"TypeRightOuterJoin":        2,
	"TypeSemiJoin":              3,
	"TypeAntiSemiJoin":          4,
	"TypeLeftOuterSemiJoin":     5,
	"TypeAntiLeftOuterSemiJoin": 6,
}

func (x JoinType) Enum() *JoinType {
	p := new(JoinType)
	*p = x
	return p
}

func (x JoinType) String() string {
	return proto.EnumName(JoinType_name, int32(x))
}

func (x *JoinType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(JoinType_value, data, "JoinType")
	if err != nil {
		return err
	}
	*x = JoinType(value)
	return nil
}

func (JoinType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{3}
}

type JoinExecType int32

const (
	JoinExecType_TypeHashJoin JoinExecType = 0
)

var JoinExecType_name = map[int32]string{
	0: "TypeHashJoin",
}

var JoinExecType_value = map[string]int32{
	"TypeHashJoin": 0,
}

func (x JoinExecType) Enum() *JoinExecType {
	p := new(JoinExecType)
	*p = x
	return p
}

func (x JoinExecType) String() string {
	return proto.EnumName(JoinExecType_name, int32(x))
}

func (x *JoinExecType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(JoinExecType_value, data, "JoinExecType")
	if err != nil {
		return err
	}
	*x = JoinExecType(value)
	return nil
}

func (JoinExecType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{4}
}

type WindowBoundType int32

const (
	WindowBoundType_Following  WindowBoundType = 0
	WindowBoundType_Preceding  WindowBoundType = 1
	WindowBoundType_CurrentRow WindowBoundType = 2
)

var WindowBoundType_name = map[int32]string{
	0: "Following",
	1: "Preceding",
	2: "CurrentRow",
}

var WindowBoundType_value = map[string]int32{
	"Following":  0,
	"Preceding":  1,
	"CurrentRow": 2,
}

func (x WindowBoundType) Enum() *WindowBoundType {
	p := new(WindowBoundType)
	*p = x
	return p
}

func (x WindowBoundType) String() string {
	return proto.EnumName(WindowBoundType_name, int32(x))
}

func (x *WindowBoundType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WindowBoundType_value, data, "WindowBoundType")
	if err != nil {
		return err
	}
	*x = WindowBoundType(value)
	return nil
}

func (WindowBoundType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{5}
}

type WindowFrameType int32

const (
	WindowFrameType_Rows   WindowFrameType = 0
	WindowFrameType_Ranges WindowFrameType = 1
	WindowFrameType_Groups WindowFrameType = 2
)

var WindowFrameType_name = map[int32]string{
	0: "Rows",
	1: "Ranges",
	2: "Groups",
}

var WindowFrameType_value = map[string]int32{
	"Rows":   0,
	"Ranges": 1,
	"Groups": 2,
}

func (x WindowFrameType) Enum() *WindowFrameType {
	p := new(WindowFrameType)
	*p = x
	return p
}

func (x WindowFrameType) String() string {
	return proto.EnumName(WindowFrameType_name, int32(x))
}

func (x *WindowFrameType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WindowFrameType_value, data, "WindowFrameType")
	if err != nil {
		return err
	}
	*x = WindowFrameType(value)
	return nil
}

func (WindowFrameType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{6}
}

// It represents a Executor.
type Executor struct {
	Tp                            ExecType            `protobuf:"varint,1,opt,name=tp,enum=tipb.ExecType" json:"tp"`
	TblScan                       *TableScan          `protobuf:"bytes,2,opt,name=tbl_scan,json=tblScan" json:"tbl_scan,omitempty"`
	IdxScan                       *IndexScan          `protobuf:"bytes,3,opt,name=idx_scan,json=idxScan" json:"idx_scan,omitempty"`
	Selection                     *Selection          `protobuf:"bytes,4,opt,name=selection" json:"selection,omitempty"`
	Aggregation                   *Aggregation        `protobuf:"bytes,5,opt,name=aggregation" json:"aggregation,omitempty"`
	TopN                          *TopN               `protobuf:"bytes,6,opt,name=topN" json:"topN,omitempty"`
	Limit                         *Limit              `protobuf:"bytes,7,opt,name=limit" json:"limit,omitempty"`
	ExchangeReceiver              *ExchangeReceiver   `protobuf:"bytes,8,opt,name=exchange_receiver,json=exchangeReceiver" json:"exchange_receiver,omitempty"`
	Join                          *Join               `protobuf:"bytes,9,opt,name=join" json:"join,omitempty"`
	ExecutorId                    *string             `protobuf:"bytes,10,opt,name=executor_id,json=executorId" json:"executor_id,omitempty"`
	Kill                          *Kill               `protobuf:"bytes,11,opt,name=kill" json:"kill,omitempty"`
	ExchangeSender                *ExchangeSender     `protobuf:"bytes,12,opt,name=exchange_sender,json=exchangeSender" json:"exchange_sender,omitempty"`
	Projection                    *Projection         `protobuf:"bytes,13,opt,name=Projection" json:"Projection,omitempty"`
	PartitionTableScan            *PartitionTableScan `protobuf:"bytes,14,opt,name=partition_table_scan,json=partitionTableScan" json:"partition_table_scan,omitempty"`
	Sort                          *Sort               `protobuf:"bytes,15,opt,name=sort" json:"sort,omitempty"`
	Window                        *Window             `protobuf:"bytes,16,opt,name=window" json:"window,omitempty"`
	FineGrainedShuffleStreamCount uint64              `protobuf:"varint,17,opt,name=fine_grained_shuffle_stream_count,json=fineGrainedShuffleStreamCount" json:"fine_grained_shuffle_stream_count"`
	FineGrainedShuffleBatchSize   uint64              `protobuf:"varint,18,opt,name=fine_grained_shuffle_batch_size,json=fineGrainedShuffleBatchSize" json:"fine_grained_shuffle_batch_size"`
	XXX_NoUnkeyedLiteral          struct{}            `json:"-"`
	XXX_unrecognized              []byte              `json:"-"`
	XXX_sizecache                 int32               `json:"-"`
}

func (m *Executor) Reset()         { *m = Executor{} }
func (m *Executor) String() string { return proto.CompactTextString(m) }
func (*Executor) ProtoMessage()    {}
func (*Executor) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{0}
}
func (m *Executor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Executor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Executor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Executor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Executor.Merge(m, src)
}
func (m *Executor) XXX_Size() int {
	return m.Size()
}
func (m *Executor) XXX_DiscardUnknown() {
	xxx_messageInfo_Executor.DiscardUnknown(m)
}

var xxx_messageInfo_Executor proto.InternalMessageInfo

func (m *Executor) GetTp() ExecType {
	if m != nil {
		return m.Tp
	}
	return ExecType_TypeTableScan
}

func (m *Executor) GetTblScan() *TableScan {
	if m != nil {
		return m.TblScan
	}
	return nil
}

func (m *Executor) GetIdxScan() *IndexScan {
	if m != nil {
		return m.IdxScan
	}
	return nil
}

func (m *Executor) GetSelection() *Selection {
	if m != nil {
		return m.Selection
	}
	return nil
}

func (m *Executor) GetAggregation() *Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

func (m *Executor) GetTopN() *TopN {
	if m != nil {
		return m.TopN
	}
	return nil
}

func (m *Executor) GetLimit() *Limit {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *Executor) GetExchangeReceiver() *ExchangeReceiver {
	if m != nil {
		return m.ExchangeReceiver
	}
	return nil
}

func (m *Executor) GetJoin() *Join {
	if m != nil {
		return m.Join
	}
	return nil
}

func (m *Executor) GetExecutorId() string {
	if m != nil && m.ExecutorId != nil {
		return *m.ExecutorId
	}
	return ""
}

func (m *Executor) GetKill() *Kill {
	if m != nil {
		return m.Kill
	}
	return nil
}

func (m *Executor) GetExchangeSender() *ExchangeSender {
	if m != nil {
		return m.ExchangeSender
	}
	return nil
}

func (m *Executor) GetProjection() *Projection {
	if m != nil {
		return m.Projection
	}
	return nil
}

func (m *Executor) GetPartitionTableScan() *PartitionTableScan {
	if m != nil {
		return m.PartitionTableScan
	}
	return nil
}

func (m *Executor) GetSort() *Sort {
	if m != nil {
		return m.Sort
	}
	return nil
}

func (m *Executor) GetWindow() *Window {
	if m != nil {
		return m.Window
	}
	return nil
}

func (m *Executor) GetFineGrainedShuffleStreamCount() uint64 {
	if m != nil {
		return m.FineGrainedShuffleStreamCount
	}
	return 0
}

func (m *Executor) GetFineGrainedShuffleBatchSize() uint64 {
	if m != nil {
		return m.FineGrainedShuffleBatchSize
	}
	return 0
}

// ExchangeSender will build connection with ExchangeReceiver.
type ExchangeSender struct {
	Tp                   ExchangeType `protobuf:"varint,1,opt,name=tp,enum=tipb.ExchangeType" json:"tp"`
	EncodedTaskMeta      [][]byte     `protobuf:"bytes,2,rep,name=encoded_task_meta,json=encodedTaskMeta" json:"encoded_task_meta,omitempty"`
	PartitionKeys        []*Expr      `protobuf:"bytes,3,rep,name=partition_keys,json=partitionKeys" json:"partition_keys,omitempty"`
	Child                *Executor    `protobuf:"bytes,4,opt,name=child" json:"child,omitempty"`
	Types                []*FieldType `protobuf:"bytes,5,rep,name=types" json:"types,omitempty"`
	AllFieldTypes        []*FieldType `protobuf:"bytes,6,rep,name=all_field_types,json=allFieldTypes" json:"all_field_types,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ExchangeSender) Reset()         { *m = ExchangeSender{} }
func (m *ExchangeSender) String() string { return proto.CompactTextString(m) }
func (*ExchangeSender) ProtoMessage()    {}
func (*ExchangeSender) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{1}
}
func (m *ExchangeSender) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeSender) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeSender.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeSender) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeSender.Merge(m, src)
}
func (m *ExchangeSender) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeSender) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeSender.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeSender proto.InternalMessageInfo

func (m *ExchangeSender) GetTp() ExchangeType {
	if m != nil {
		return m.Tp
	}
	return ExchangeType_PassThrough
}

func (m *ExchangeSender) GetEncodedTaskMeta() [][]byte {
	if m != nil {
		return m.EncodedTaskMeta
	}
	return nil
}

func (m *ExchangeSender) GetPartitionKeys() []*Expr {
	if m != nil {
		return m.PartitionKeys
	}
	return nil
}

func (m *ExchangeSender) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *ExchangeSender) GetTypes() []*FieldType {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *ExchangeSender) GetAllFieldTypes() []*FieldType {
	if m != nil {
		return m.AllFieldTypes
	}
	return nil
}

// ExchangeReceiver accept connection and receiver data from ExchangeSender.
type ExchangeReceiver struct {
	EncodedTaskMeta      [][]byte      `protobuf:"bytes,1,rep,name=encoded_task_meta,json=encodedTaskMeta" json:"encoded_task_meta,omitempty"`
	FieldTypes           []*FieldType  `protobuf:"bytes,2,rep,name=field_types,json=fieldTypes" json:"field_types,omitempty"`
	Tp                   *ExchangeType `protobuf:"varint,3,opt,name=tp,enum=tipb.ExchangeType" json:"tp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ExchangeReceiver) Reset()         { *m = ExchangeReceiver{} }
func (m *ExchangeReceiver) String() string { return proto.CompactTextString(m) }
func (*ExchangeReceiver) ProtoMessage()    {}
func (*ExchangeReceiver) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{2}
}
func (m *ExchangeReceiver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeReceiver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeReceiver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeReceiver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeReceiver.Merge(m, src)
}
func (m *ExchangeReceiver) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeReceiver) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeReceiver.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeReceiver proto.InternalMessageInfo

func (m *ExchangeReceiver) GetEncodedTaskMeta() [][]byte {
	if m != nil {
		return m.EncodedTaskMeta
	}
	return nil
}

func (m *ExchangeReceiver) GetFieldTypes() []*FieldType {
	if m != nil {
		return m.FieldTypes
	}
	return nil
}

func (m *ExchangeReceiver) GetTp() ExchangeType {
	if m != nil && m.Tp != nil {
		return *m.Tp
	}
	return ExchangeType_PassThrough
}

type TableScan struct {
	TableId                int64         `protobuf:"varint,1,opt,name=table_id,json=tableId" json:"table_id"`
	Columns                []*ColumnInfo `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
	Desc                   bool          `protobuf:"varint,3,opt,name=desc" json:"desc"`
	PrimaryColumnIds       []int64       `protobuf:"varint,4,rep,name=primary_column_ids,json=primaryColumnIds" json:"primary_column_ids,omitempty"`
	NextReadEngine         EngineType    `protobuf:"varint,5,opt,name=next_read_engine,json=nextReadEngine,enum=tipb.EngineType" json:"next_read_engine"`
	Ranges                 []KeyRange    `protobuf:"bytes,6,rep,name=ranges" json:"ranges"`
	PrimaryPrefixColumnIds []int64       `protobuf:"varint,7,rep,name=primary_prefix_column_ids,json=primaryPrefixColumnIds" json:"primary_prefix_column_ids,omitempty"`
	KeepOrder              *bool         `protobuf:"varint,8,opt,name=keep_order,json=keepOrder" json:"keep_order,omitempty"`
	IsFastScan             *bool         `protobuf:"varint,9,opt,name=is_fast_scan,json=isFastScan" json:"is_fast_scan,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}      `json:"-"`
	XXX_unrecognized       []byte        `json:"-"`
	XXX_sizecache          int32         `json:"-"`
}

func (m *TableScan) Reset()         { *m = TableScan{} }
func (m *TableScan) String() string { return proto.CompactTextString(m) }
func (*TableScan) ProtoMessage()    {}
func (*TableScan) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{3}
}
func (m *TableScan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableScan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableScan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableScan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableScan.Merge(m, src)
}
func (m *TableScan) XXX_Size() int {
	return m.Size()
}
func (m *TableScan) XXX_DiscardUnknown() {
	xxx_messageInfo_TableScan.DiscardUnknown(m)
}

var xxx_messageInfo_TableScan proto.InternalMessageInfo

func (m *TableScan) GetTableId() int64 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *TableScan) GetColumns() []*ColumnInfo {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *TableScan) GetDesc() bool {
	if m != nil {
		return m.Desc
	}
	return false
}

func (m *TableScan) GetPrimaryColumnIds() []int64 {
	if m != nil {
		return m.PrimaryColumnIds
	}
	return nil
}

func (m *TableScan) GetNextReadEngine() EngineType {
	if m != nil {
		return m.NextReadEngine
	}
	return EngineType_Local
}

func (m *TableScan) GetRanges() []KeyRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *TableScan) GetPrimaryPrefixColumnIds() []int64 {
	if m != nil {
		return m.PrimaryPrefixColumnIds
	}
	return nil
}

func (m *TableScan) GetKeepOrder() bool {
	if m != nil && m.KeepOrder != nil {
		return *m.KeepOrder
	}
	return false
}

func (m *TableScan) GetIsFastScan() bool {
	if m != nil && m.IsFastScan != nil {
		return *m.IsFastScan
	}
	return false
}

type PartitionTableScan struct {
	TableId                int64         `protobuf:"varint,1,opt,name=table_id,json=tableId" json:"table_id"`
	Columns                []*ColumnInfo `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
	Desc                   bool          `protobuf:"varint,3,opt,name=desc" json:"desc"`
	PrimaryColumnIds       []int64       `protobuf:"varint,4,rep,name=primary_column_ids,json=primaryColumnIds" json:"primary_column_ids,omitempty"`
	PrimaryPrefixColumnIds []int64       `protobuf:"varint,5,rep,name=primary_prefix_column_ids,json=primaryPrefixColumnIds" json:"primary_prefix_column_ids,omitempty"`
	PartitionIds           []int64       `protobuf:"varint,6,rep,name=partition_ids,json=partitionIds" json:"partition_ids,omitempty"`
	IsFastScan             *bool         `protobuf:"varint,7,opt,name=is_fast_scan,json=isFastScan" json:"is_fast_scan,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}      `json:"-"`
	XXX_unrecognized       []byte        `json:"-"`
	XXX_sizecache          int32         `json:"-"`
}

func (m *PartitionTableScan) Reset()         { *m = PartitionTableScan{} }
func (m *PartitionTableScan) String() string { return proto.CompactTextString(m) }
func (*PartitionTableScan) ProtoMessage()    {}
func (*PartitionTableScan) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{4}
}
func (m *PartitionTableScan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionTableScan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionTableScan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionTableScan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionTableScan.Merge(m, src)
}
func (m *PartitionTableScan) XXX_Size() int {
	return m.Size()
}
func (m *PartitionTableScan) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionTableScan.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionTableScan proto.InternalMessageInfo

func (m *PartitionTableScan) GetTableId() int64 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *PartitionTableScan) GetColumns() []*ColumnInfo {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *PartitionTableScan) GetDesc() bool {
	if m != nil {
		return m.Desc
	}
	return false
}

func (m *PartitionTableScan) GetPrimaryColumnIds() []int64 {
	if m != nil {
		return m.PrimaryColumnIds
	}
	return nil
}

func (m *PartitionTableScan) GetPrimaryPrefixColumnIds() []int64 {
	if m != nil {
		return m.PrimaryPrefixColumnIds
	}
	return nil
}

func (m *PartitionTableScan) GetPartitionIds() []int64 {
	if m != nil {
		return m.PartitionIds
	}
	return nil
}

func (m *PartitionTableScan) GetIsFastScan() bool {
	if m != nil && m.IsFastScan != nil {
		return *m.IsFastScan
	}
	return false
}

type Join struct {
	JoinType      JoinType     `protobuf:"varint,1,opt,name=join_type,json=joinType,enum=tipb.JoinType" json:"join_type"`
	JoinExecType  JoinExecType `protobuf:"varint,2,opt,name=join_exec_type,json=joinExecType,enum=tipb.JoinExecType" json:"join_exec_type"`
	Children      []*Executor  `protobuf:"bytes,3,rep,name=children" json:"children,omitempty"`
	InnerIdx      int64        `protobuf:"varint,4,opt,name=inner_idx,json=innerIdx" json:"inner_idx"`
	LeftJoinKeys  []*Expr      `protobuf:"bytes,5,rep,name=left_join_keys,json=leftJoinKeys" json:"left_join_keys,omitempty"`
	RightJoinKeys []*Expr      `protobuf:"bytes,6,rep,name=right_join_keys,json=rightJoinKeys" json:"right_join_keys,omitempty"`
	// used by TiFlash join when new collation is enabled.
	ProbeTypes              []*FieldType `protobuf:"bytes,7,rep,name=probe_types,json=probeTypes" json:"probe_types,omitempty"`
	BuildTypes              []*FieldType `protobuf:"bytes,8,rep,name=build_types,json=buildTypes" json:"build_types,omitempty"`
	LeftConditions          []*Expr      `protobuf:"bytes,9,rep,name=left_conditions,json=leftConditions" json:"left_conditions,omitempty"`
	RightConditions         []*Expr      `protobuf:"bytes,10,rep,name=right_conditions,json=rightConditions" json:"right_conditions,omitempty"`
	OtherConditions         []*Expr      `protobuf:"bytes,11,rep,name=other_conditions,json=otherConditions" json:"other_conditions,omitempty"`
	OtherEqConditionsFromIn []*Expr      `protobuf:"bytes,12,rep,name=other_eq_conditions_from_in,json=otherEqConditionsFromIn" json:"other_eq_conditions_from_in,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}     `json:"-"`
	XXX_unrecognized        []byte       `json:"-"`
	XXX_sizecache           int32        `json:"-"`
}

func (m *Join) Reset()         { *m = Join{} }
func (m *Join) String() string { return proto.CompactTextString(m) }
func (*Join) ProtoMessage()    {}
func (*Join) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{5}
}
func (m *Join) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Join) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Join.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Join) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Join.Merge(m, src)
}
func (m *Join) XXX_Size() int {
	return m.Size()
}
func (m *Join) XXX_DiscardUnknown() {
	xxx_messageInfo_Join.DiscardUnknown(m)
}

var xxx_messageInfo_Join proto.InternalMessageInfo

func (m *Join) GetJoinType() JoinType {
	if m != nil {
		return m.JoinType
	}
	return JoinType_TypeInnerJoin
}

func (m *Join) GetJoinExecType() JoinExecType {
	if m != nil {
		return m.JoinExecType
	}
	return JoinExecType_TypeHashJoin
}

func (m *Join) GetChildren() []*Executor {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Join) GetInnerIdx() int64 {
	if m != nil {
		return m.InnerIdx
	}
	return 0
}

func (m *Join) GetLeftJoinKeys() []*Expr {
	if m != nil {
		return m.LeftJoinKeys
	}
	return nil
}

func (m *Join) GetRightJoinKeys() []*Expr {
	if m != nil {
		return m.RightJoinKeys
	}
	return nil
}

func (m *Join) GetProbeTypes() []*FieldType {
	if m != nil {
		return m.ProbeTypes
	}
	return nil
}

func (m *Join) GetBuildTypes() []*FieldType {
	if m != nil {
		return m.BuildTypes
	}
	return nil
}

func (m *Join) GetLeftConditions() []*Expr {
	if m != nil {
		return m.LeftConditions
	}
	return nil
}

func (m *Join) GetRightConditions() []*Expr {
	if m != nil {
		return m.RightConditions
	}
	return nil
}

func (m *Join) GetOtherConditions() []*Expr {
	if m != nil {
		return m.OtherConditions
	}
	return nil
}

func (m *Join) GetOtherEqConditionsFromIn() []*Expr {
	if m != nil {
		return m.OtherEqConditionsFromIn
	}
	return nil
}

type IndexScan struct {
	TableId              int64         `protobuf:"varint,1,opt,name=table_id,json=tableId" json:"table_id"`
	IndexId              int64         `protobuf:"varint,2,opt,name=index_id,json=indexId" json:"index_id"`
	Columns              []*ColumnInfo `protobuf:"bytes,3,rep,name=columns" json:"columns,omitempty"`
	Desc                 bool          `protobuf:"varint,4,opt,name=desc" json:"desc"`
	Unique               *bool         `protobuf:"varint,5,opt,name=unique" json:"unique,omitempty"`
	PrimaryColumnIds     []int64       `protobuf:"varint,6,rep,name=primary_column_ids,json=primaryColumnIds" json:"primary_column_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *IndexScan) Reset()         { *m = IndexScan{} }
func (m *IndexScan) String() string { return proto.CompactTextString(m) }
func (*IndexScan) ProtoMessage()    {}
func (*IndexScan) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{6}
}
func (m *IndexScan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexScan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexScan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexScan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexScan.Merge(m, src)
}
func (m *IndexScan) XXX_Size() int {
	return m.Size()
}
func (m *IndexScan) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexScan.DiscardUnknown(m)
}

var xxx_messageInfo_IndexScan proto.InternalMessageInfo

func (m *IndexScan) GetTableId() int64 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *IndexScan) GetIndexId() int64 {
	if m != nil {
		return m.IndexId
	}
	return 0
}

func (m *IndexScan) GetColumns() []*ColumnInfo {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *IndexScan) GetDesc() bool {
	if m != nil {
		return m.Desc
	}
	return false
}

func (m *IndexScan) GetUnique() bool {
	if m != nil && m.Unique != nil {
		return *m.Unique
	}
	return false
}

func (m *IndexScan) GetPrimaryColumnIds() []int64 {
	if m != nil {
		return m.PrimaryColumnIds
	}
	return nil
}

type Selection struct {
	// Where conditions.
	Conditions           []*Expr    `protobuf:"bytes,1,rep,name=conditions" json:"conditions,omitempty"`
	RpnConditions        []*RpnExpr `protobuf:"bytes,2,rep,name=rpn_conditions,json=rpnConditions" json:"rpn_conditions,omitempty"`
	Child                *Executor  `protobuf:"bytes,3,opt,name=child" json:"child,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Selection) Reset()         { *m = Selection{} }
func (m *Selection) String() string { return proto.CompactTextString(m) }
func (*Selection) ProtoMessage()    {}
func (*Selection) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{7}
}
func (m *Selection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Selection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Selection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Selection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Selection.Merge(m, src)
}
func (m *Selection) XXX_Size() int {
	return m.Size()
}
func (m *Selection) XXX_DiscardUnknown() {
	xxx_messageInfo_Selection.DiscardUnknown(m)
}

var xxx_messageInfo_Selection proto.InternalMessageInfo

func (m *Selection) GetConditions() []*Expr {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Selection) GetRpnConditions() []*RpnExpr {
	if m != nil {
		return m.RpnConditions
	}
	return nil
}

func (m *Selection) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

type Projection struct {
	// Projection expressions.
	Exprs                []*Expr    `protobuf:"bytes,1,rep,name=exprs" json:"exprs,omitempty"`
	RpnExprs             []*RpnExpr `protobuf:"bytes,2,rep,name=rpn_exprs,json=rpnExprs" json:"rpn_exprs,omitempty"`
	Child                *Executor  `protobuf:"bytes,3,opt,name=child" json:"child,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Projection) Reset()         { *m = Projection{} }
func (m *Projection) String() string { return proto.CompactTextString(m) }
func (*Projection) ProtoMessage()    {}
func (*Projection) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{8}
}
func (m *Projection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Projection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Projection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Projection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Projection.Merge(m, src)
}
func (m *Projection) XXX_Size() int {
	return m.Size()
}
func (m *Projection) XXX_DiscardUnknown() {
	xxx_messageInfo_Projection.DiscardUnknown(m)
}

var xxx_messageInfo_Projection proto.InternalMessageInfo

func (m *Projection) GetExprs() []*Expr {
	if m != nil {
		return m.Exprs
	}
	return nil
}

func (m *Projection) GetRpnExprs() []*RpnExpr {
	if m != nil {
		return m.RpnExprs
	}
	return nil
}

func (m *Projection) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

type Aggregation struct {
	// Group by clause.
	GroupBy    []*Expr    `protobuf:"bytes,1,rep,name=group_by,json=groupBy" json:"group_by,omitempty"`
	RpnGroupBy []*RpnExpr `protobuf:"bytes,4,rep,name=rpn_group_by,json=rpnGroupBy" json:"rpn_group_by,omitempty"`
	// Aggregate functions.
	AggFunc    []*Expr    `protobuf:"bytes,2,rep,name=agg_func,json=aggFunc" json:"agg_func,omitempty"`
	RpnAggFunc []*RpnExpr `protobuf:"bytes,5,rep,name=rpn_agg_func,json=rpnAggFunc" json:"rpn_agg_func,omitempty"`
	// If it is a stream aggregation.
	Streamed             bool      `protobuf:"varint,3,opt,name=streamed" json:"streamed"`
	Child                *Executor `protobuf:"bytes,6,opt,name=child" json:"child,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Aggregation) Reset()         { *m = Aggregation{} }
func (m *Aggregation) String() string { return proto.CompactTextString(m) }
func (*Aggregation) ProtoMessage()    {}
func (*Aggregation) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{9}
}
func (m *Aggregation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Aggregation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Aggregation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Aggregation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Aggregation.Merge(m, src)
}
func (m *Aggregation) XXX_Size() int {
	return m.Size()
}
func (m *Aggregation) XXX_DiscardUnknown() {
	xxx_messageInfo_Aggregation.DiscardUnknown(m)
}

var xxx_messageInfo_Aggregation proto.InternalMessageInfo

func (m *Aggregation) GetGroupBy() []*Expr {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *Aggregation) GetRpnGroupBy() []*RpnExpr {
	if m != nil {
		return m.RpnGroupBy
	}
	return nil
}

func (m *Aggregation) GetAggFunc() []*Expr {
	if m != nil {
		return m.AggFunc
	}
	return nil
}

func (m *Aggregation) GetRpnAggFunc() []*RpnExpr {
	if m != nil {
		return m.RpnAggFunc
	}
	return nil
}

func (m *Aggregation) GetStreamed() bool {
	if m != nil {
		return m.Streamed
	}
	return false
}

func (m *Aggregation) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

type TopN struct {
	// Order by clause.
	OrderBy              []*ByItem `protobuf:"bytes,1,rep,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Limit                uint64    `protobuf:"varint,2,opt,name=limit" json:"limit"`
	Child                *Executor `protobuf:"bytes,3,opt,name=child" json:"child,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TopN) Reset()         { *m = TopN{} }
func (m *TopN) String() string { return proto.CompactTextString(m) }
func (*TopN) ProtoMessage()    {}
func (*TopN) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{10}
}
func (m *TopN) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopN.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopN.Merge(m, src)
}
func (m *TopN) XXX_Size() int {
	return m.Size()
}
func (m *TopN) XXX_DiscardUnknown() {
	xxx_messageInfo_TopN.DiscardUnknown(m)
}

var xxx_messageInfo_TopN proto.InternalMessageInfo

func (m *TopN) GetOrderBy() []*ByItem {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *TopN) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TopN) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

type Limit struct {
	// Limit the result to be returned.
	Limit                uint64    `protobuf:"varint,1,opt,name=limit" json:"limit"`
	Child                *Executor `protobuf:"bytes,2,opt,name=child" json:"child,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Limit) Reset()         { *m = Limit{} }
func (m *Limit) String() string { return proto.CompactTextString(m) }
func (*Limit) ProtoMessage()    {}
func (*Limit) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{11}
}
func (m *Limit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Limit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Limit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Limit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Limit.Merge(m, src)
}
func (m *Limit) XXX_Size() int {
	return m.Size()
}
func (m *Limit) XXX_DiscardUnknown() {
	xxx_messageInfo_Limit.DiscardUnknown(m)
}

var xxx_messageInfo_Limit proto.InternalMessageInfo

func (m *Limit) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Limit) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

type Kill struct {
	ConnID uint64 `protobuf:"varint,1,opt,name=connID" json:"connID"`
	// Query indicates whether terminate a single query on this connection or the whole connection.
	//   If Query is true, terminates the statement the connection is currently executing, but leaves the connection itself intact.
	//   If Query is false, terminates the connection associated with the given ConnectionID, after terminating any statement the connection is executing.
	//   See https://dev.mysql.com/doc/refman/8.0/en/kill.html.
	Query                bool     `protobuf:"varint,2,opt,name=query" json:"query"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Kill) Reset()         { *m = Kill{} }
func (m *Kill) String() string { return proto.CompactTextString(m) }
func (*Kill) ProtoMessage()    {}
func (*Kill) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{12}
}
func (m *Kill) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Kill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Kill.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Kill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kill.Merge(m, src)
}
func (m *Kill) XXX_Size() int {
	return m.Size()
}
func (m *Kill) XXX_DiscardUnknown() {
	xxx_messageInfo_Kill.DiscardUnknown(m)
}

var xxx_messageInfo_Kill proto.InternalMessageInfo

func (m *Kill) GetConnID() uint64 {
	if m != nil {
		return m.ConnID
	}
	return 0
}

func (m *Kill) GetQuery() bool {
	if m != nil {
		return m.Query
	}
	return false
}

type ExecutorExecutionSummary struct {
	// Total time cost in this executor. Includes self time cost and children time cost.
	TimeProcessedNs *uint64 `protobuf:"varint,1,opt,name=time_processed_ns,json=timeProcessedNs" json:"time_processed_ns,omitempty"`
	// How many rows this executor produced totally.
	NumProducedRows *uint64 `protobuf:"varint,2,opt,name=num_produced_rows,json=numProducedRows" json:"num_produced_rows,omitempty"`
	// How many times executor's `next()` is called.
	NumIterations *uint64 `protobuf:"varint,3,opt,name=num_iterations,json=numIterations" json:"num_iterations,omitempty"`
	// Coresponding executor id
	ExecutorId *string `protobuf:"bytes,4,opt,name=executor_id,json=executorId" json:"executor_id,omitempty"`
	// The execution concurrency for this executor
	Concurrency *uint64 `protobuf:"varint,5,opt,name=concurrency" json:"concurrency,omitempty"`
	// Types that are valid to be assigned to DetailInfo:
	//	*ExecutorExecutionSummary_TiflashScanContext
	DetailInfo           isExecutorExecutionSummary_DetailInfo `protobuf_oneof:"DetailInfo"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ExecutorExecutionSummary) Reset()         { *m = ExecutorExecutionSummary{} }
func (m *ExecutorExecutionSummary) String() string { return proto.CompactTextString(m) }
func (*ExecutorExecutionSummary) ProtoMessage()    {}
func (*ExecutorExecutionSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{13}
}
func (m *ExecutorExecutionSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutorExecutionSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutorExecutionSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutorExecutionSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutorExecutionSummary.Merge(m, src)
}
func (m *ExecutorExecutionSummary) XXX_Size() int {
	return m.Size()
}
func (m *ExecutorExecutionSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutorExecutionSummary.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutorExecutionSummary proto.InternalMessageInfo

type isExecutorExecutionSummary_DetailInfo interface {
	isExecutorExecutionSummary_DetailInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExecutorExecutionSummary_TiflashScanContext struct {
	TiflashScanContext *TiFlashScanContext `protobuf:"bytes,6,opt,name=tiflash_scan_context,json=tiflashScanContext,oneof" json:"tiflash_scan_context,omitempty"`
}

func (*ExecutorExecutionSummary_TiflashScanContext) isExecutorExecutionSummary_DetailInfo() {}

func (m *ExecutorExecutionSummary) GetDetailInfo() isExecutorExecutionSummary_DetailInfo {
	if m != nil {
		return m.DetailInfo
	}
	return nil
}

func (m *ExecutorExecutionSummary) GetTimeProcessedNs() uint64 {
	if m != nil && m.TimeProcessedNs != nil {
		return *m.TimeProcessedNs
	}
	return 0
}

func (m *ExecutorExecutionSummary) GetNumProducedRows() uint64 {
	if m != nil && m.NumProducedRows != nil {
		return *m.NumProducedRows
	}
	return 0
}

func (m *ExecutorExecutionSummary) GetNumIterations() uint64 {
	if m != nil && m.NumIterations != nil {
		return *m.NumIterations
	}
	return 0
}

func (m *ExecutorExecutionSummary) GetExecutorId() string {
	if m != nil && m.ExecutorId != nil {
		return *m.ExecutorId
	}
	return ""
}

func (m *ExecutorExecutionSummary) GetConcurrency() uint64 {
	if m != nil && m.Concurrency != nil {
		return *m.Concurrency
	}
	return 0
}

func (m *ExecutorExecutionSummary) GetTiflashScanContext() *TiFlashScanContext {
	if x, ok := m.GetDetailInfo().(*ExecutorExecutionSummary_TiflashScanContext); ok {
		return x.TiflashScanContext
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExecutorExecutionSummary) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExecutorExecutionSummary_TiflashScanContext)(nil),
	}
}

type TiFlashScanContext struct {
	TotalDmfileScannedPacks            *uint64  `protobuf:"varint,1,opt,name=total_dmfile_scanned_packs,json=totalDmfileScannedPacks" json:"total_dmfile_scanned_packs,omitempty"`
	TotalDmfileSkippedPacks            *uint64  `protobuf:"varint,2,opt,name=total_dmfile_skipped_packs,json=totalDmfileSkippedPacks" json:"total_dmfile_skipped_packs,omitempty"`
	TotalDmfileScannedRows             *uint64  `protobuf:"varint,3,opt,name=total_dmfile_scanned_rows,json=totalDmfileScannedRows" json:"total_dmfile_scanned_rows,omitempty"`
	TotalDmfileSkippedRows             *uint64  `protobuf:"varint,4,opt,name=total_dmfile_skipped_rows,json=totalDmfileSkippedRows" json:"total_dmfile_skipped_rows,omitempty"`
	TotalDmfileRoughSetIndexLoadTimeMs *uint64  `protobuf:"varint,5,opt,name=total_dmfile_rough_set_index_load_time_ms,json=totalDmfileRoughSetIndexLoadTimeMs" json:"total_dmfile_rough_set_index_load_time_ms,omitempty"`
	TotalDmfileReadTimeMs              *uint64  `protobuf:"varint,6,opt,name=total_dmfile_read_time_ms,json=totalDmfileReadTimeMs" json:"total_dmfile_read_time_ms,omitempty"`
	TotalCreateSnapshotTimeMs          *uint64  `protobuf:"varint,7,opt,name=total_create_snapshot_time_ms,json=totalCreateSnapshotTimeMs" json:"total_create_snapshot_time_ms,omitempty"`
	XXX_NoUnkeyedLiteral               struct{} `json:"-"`
	XXX_unrecognized                   []byte   `json:"-"`
	XXX_sizecache                      int32    `json:"-"`
}

func (m *TiFlashScanContext) Reset()         { *m = TiFlashScanContext{} }
func (m *TiFlashScanContext) String() string { return proto.CompactTextString(m) }
func (*TiFlashScanContext) ProtoMessage()    {}
func (*TiFlashScanContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{14}
}
func (m *TiFlashScanContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TiFlashScanContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TiFlashScanContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TiFlashScanContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TiFlashScanContext.Merge(m, src)
}
func (m *TiFlashScanContext) XXX_Size() int {
	return m.Size()
}
func (m *TiFlashScanContext) XXX_DiscardUnknown() {
	xxx_messageInfo_TiFlashScanContext.DiscardUnknown(m)
}

var xxx_messageInfo_TiFlashScanContext proto.InternalMessageInfo

func (m *TiFlashScanContext) GetTotalDmfileScannedPacks() uint64 {
	if m != nil && m.TotalDmfileScannedPacks != nil {
		return *m.TotalDmfileScannedPacks
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalDmfileSkippedPacks() uint64 {
	if m != nil && m.TotalDmfileSkippedPacks != nil {
		return *m.TotalDmfileSkippedPacks
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalDmfileScannedRows() uint64 {
	if m != nil && m.TotalDmfileScannedRows != nil {
		return *m.TotalDmfileScannedRows
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalDmfileSkippedRows() uint64 {
	if m != nil && m.TotalDmfileSkippedRows != nil {
		return *m.TotalDmfileSkippedRows
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalDmfileRoughSetIndexLoadTimeMs() uint64 {
	if m != nil && m.TotalDmfileRoughSetIndexLoadTimeMs != nil {
		return *m.TotalDmfileRoughSetIndexLoadTimeMs
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalDmfileReadTimeMs() uint64 {
	if m != nil && m.TotalDmfileReadTimeMs != nil {
		return *m.TotalDmfileReadTimeMs
	}
	return 0
}

func (m *TiFlashScanContext) GetTotalCreateSnapshotTimeMs() uint64 {
	if m != nil && m.TotalCreateSnapshotTimeMs != nil {
		return *m.TotalCreateSnapshotTimeMs
	}
	return 0
}

type Sort struct {
	ByItems              []*ByItem `protobuf:"bytes,1,rep,name=byItems" json:"byItems,omitempty"`
	IsPartialSort        *bool     `protobuf:"varint,2,opt,name=isPartialSort" json:"isPartialSort,omitempty"`
	Child                *Executor `protobuf:"bytes,3,opt,name=child" json:"child,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Sort) Reset()         { *m = Sort{} }
func (m *Sort) String() string { return proto.CompactTextString(m) }
func (*Sort) ProtoMessage()    {}
func (*Sort) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{15}
}
func (m *Sort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sort.Merge(m, src)
}
func (m *Sort) XXX_Size() int {
	return m.Size()
}
func (m *Sort) XXX_DiscardUnknown() {
	xxx_messageInfo_Sort.DiscardUnknown(m)
}

var xxx_messageInfo_Sort proto.InternalMessageInfo

func (m *Sort) GetByItems() []*ByItem {
	if m != nil {
		return m.ByItems
	}
	return nil
}

func (m *Sort) GetIsPartialSort() bool {
	if m != nil && m.IsPartialSort != nil {
		return *m.IsPartialSort
	}
	return false
}

func (m *Sort) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

type WindowFrameBound struct {
	Type                 WindowBoundType `protobuf:"varint,1,opt,name=type,enum=tipb.WindowBoundType" json:"type"`
	Unbounded            bool            `protobuf:"varint,2,opt,name=unbounded" json:"unbounded"`
	Offset               *uint64         `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	CalcFuncs            []*Expr         `protobuf:"bytes,4,rep,name=calcFuncs" json:"calcFuncs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WindowFrameBound) Reset()         { *m = WindowFrameBound{} }
func (m *WindowFrameBound) String() string { return proto.CompactTextString(m) }
func (*WindowFrameBound) ProtoMessage()    {}
func (*WindowFrameBound) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{16}
}
func (m *WindowFrameBound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WindowFrameBound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WindowFrameBound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WindowFrameBound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WindowFrameBound.Merge(m, src)
}
func (m *WindowFrameBound) XXX_Size() int {
	return m.Size()
}
func (m *WindowFrameBound) XXX_DiscardUnknown() {
	xxx_messageInfo_WindowFrameBound.DiscardUnknown(m)
}

var xxx_messageInfo_WindowFrameBound proto.InternalMessageInfo

func (m *WindowFrameBound) GetType() WindowBoundType {
	if m != nil {
		return m.Type
	}
	return WindowBoundType_Following
}

func (m *WindowFrameBound) GetUnbounded() bool {
	if m != nil {
		return m.Unbounded
	}
	return false
}

func (m *WindowFrameBound) GetOffset() uint64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *WindowFrameBound) GetCalcFuncs() []*Expr {
	if m != nil {
		return m.CalcFuncs
	}
	return nil
}

type WindowFrame struct {
	Type                 WindowFrameType   `protobuf:"varint,1,opt,name=type,enum=tipb.WindowFrameType" json:"type"`
	Start                *WindowFrameBound `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	End                  *WindowFrameBound `protobuf:"bytes,3,opt,name=end" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WindowFrame) Reset()         { *m = WindowFrame{} }
func (m *WindowFrame) String() string { return proto.CompactTextString(m) }
func (*WindowFrame) ProtoMessage()    {}
func (*WindowFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{17}
}
func (m *WindowFrame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WindowFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WindowFrame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WindowFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WindowFrame.Merge(m, src)
}
func (m *WindowFrame) XXX_Size() int {
	return m.Size()
}
func (m *WindowFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_WindowFrame.DiscardUnknown(m)
}

var xxx_messageInfo_WindowFrame proto.InternalMessageInfo

func (m *WindowFrame) GetType() WindowFrameType {
	if m != nil {
		return m.Type
	}
	return WindowFrameType_Rows
}

func (m *WindowFrame) GetStart() *WindowFrameBound {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *WindowFrame) GetEnd() *WindowFrameBound {
	if m != nil {
		return m.End
	}
	return nil
}

type Window struct {
	FuncDesc             []*Expr      `protobuf:"bytes,1,rep,name=func_desc,json=funcDesc" json:"func_desc,omitempty"`
	PartitionBy          []*ByItem    `protobuf:"bytes,2,rep,name=partition_by,json=partitionBy" json:"partition_by,omitempty"`
	OrderBy              []*ByItem    `protobuf:"bytes,3,rep,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Frame                *WindowFrame `protobuf:"bytes,4,opt,name=frame" json:"frame,omitempty"`
	Child                *Executor    `protobuf:"bytes,5,opt,name=child" json:"child,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Window) Reset()         { *m = Window{} }
func (m *Window) String() string { return proto.CompactTextString(m) }
func (*Window) ProtoMessage()    {}
func (*Window) Descriptor() ([]byte, []int) {
	return fileDescriptor_12d1cdcda51e000f, []int{18}
}
func (m *Window) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Window) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Window.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Window) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Window.Merge(m, src)
}
func (m *Window) XXX_Size() int {
	return m.Size()
}
func (m *Window) XXX_DiscardUnknown() {
	xxx_messageInfo_Window.DiscardUnknown(m)
}

var xxx_messageInfo_Window proto.InternalMessageInfo

func (m *Window) GetFuncDesc() []*Expr {
	if m != nil {
		return m.FuncDesc
	}
	return nil
}

func (m *Window) GetPartitionBy() []*ByItem {
	if m != nil {
		return m.PartitionBy
	}
	return nil
}

func (m *Window) GetOrderBy() []*ByItem {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *Window) GetFrame() *WindowFrame {
	if m != nil {
		return m.Frame
	}
	return nil
}

func (m *Window) GetChild() *Executor {
	if m != nil {
		return m.Child
	}
	return nil
}

func init() {
	proto.RegisterEnum("tipb.ExecType", ExecType_name, ExecType_value)
	proto.RegisterEnum("tipb.ExchangeType", ExchangeType_name, ExchangeType_value)
	proto.RegisterEnum("tipb.EngineType", EngineType_name, EngineType_value)
	proto.RegisterEnum("tipb.JoinType", JoinType_name, JoinType_value)
	proto.RegisterEnum("tipb.JoinExecType", JoinExecType_name, JoinExecType_value)
	proto.RegisterEnum("tipb.WindowBoundType", WindowBoundType_name, WindowBoundType_value)
	proto.RegisterEnum("tipb.WindowFrameType", WindowFrameType_name, WindowFrameType_value)
	proto.RegisterType((*Executor)(nil), "tipb.Executor")
	proto.RegisterType((*ExchangeSender)(nil), "tipb.ExchangeSender")
	proto.RegisterType((*ExchangeReceiver)(nil), "tipb.ExchangeReceiver")
	proto.RegisterType((*TableScan)(nil), "tipb.TableScan")
	proto.RegisterType((*PartitionTableScan)(nil), "tipb.PartitionTableScan")
	proto.RegisterType((*Join)(nil), "tipb.Join")
	proto.RegisterType((*IndexScan)(nil), "tipb.IndexScan")
	proto.RegisterType((*Selection)(nil), "tipb.Selection")
	proto.RegisterType((*Projection)(nil), "tipb.Projection")
	proto.RegisterType((*Aggregation)(nil), "tipb.Aggregation")
	proto.RegisterType((*TopN)(nil), "tipb.TopN")
	proto.RegisterType((*Limit)(nil), "tipb.Limit")
	proto.RegisterType((*Kill)(nil), "tipb.Kill")
	proto.RegisterType((*ExecutorExecutionSummary)(nil), "tipb.ExecutorExecutionSummary")
	proto.RegisterType((*TiFlashScanContext)(nil), "tipb.TiFlashScanContext")
	proto.RegisterType((*Sort)(nil), "tipb.Sort")
	proto.RegisterType((*WindowFrameBound)(nil), "tipb.WindowFrameBound")
	proto.RegisterType((*WindowFrame)(nil), "tipb.WindowFrame")
	proto.RegisterType((*Window)(nil), "tipb.Window")
}

func init() { proto.RegisterFile("executor.proto", fileDescriptor_12d1cdcda51e000f) }

var fileDescriptor_12d1cdcda51e000f = []byte{
	// 2322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcf, 0x73, 0x1b, 0x49,
	0xf5, 0xf7, 0xe8, 0xb7, 0x9e, 0x64, 0x69, 0xdc, 0x5f, 0xc7, 0x3b, 0xc9, 0x7e, 0x93, 0x68, 0x45,
	0xc2, 0x7a, 0x5d, 0x8b, 0x93, 0xdd, 0x85, 0x62, 0xb7, 0x28, 0x60, 0xd7, 0x4e, 0xbc, 0xeb, 0x24,
	0x9b, 0x75, 0x8d, 0x0d, 0x1c, 0xa7, 0xc6, 0x33, 0x2d, 0xa9, 0xe3, 0x51, 0xf7, 0x64, 0xa6, 0x85,
	0xad, 0x9c, 0xb8, 0x70, 0xe3, 0x06, 0x45, 0x71, 0xe3, 0xc2, 0x85, 0xa2, 0x8a, 0x33, 0x7f, 0xc2,
	0x1e, 0xb9, 0x51, 0x70, 0xa0, 0xa8, 0xf0, 0x2f, 0x70, 0x87, 0xea, 0xd7, 0x3d, 0xa3, 0x91, 0x47,
	0x36, 0x39, 0x72, 0x92, 0xfa, 0xbd, 0xcf, 0x7b, 0xfd, 0xfa, 0xbd, 0x7e, 0x3f, 0x7a, 0xa0, 0x47,
	0x2f, 0x68, 0x30, 0x93, 0x22, 0xd9, 0x8d, 0x13, 0x21, 0x05, 0xa9, 0x49, 0x16, 0x9f, 0xde, 0xb2,
	0xe9, 0x45, 0x9c, 0xd0, 0x34, 0x65, 0x82, 0x6b, 0xfa, 0xad, 0x6e, 0x1a, 0x4c, 0xe8, 0xd4, 0x37,
	0xab, 0xcd, 0xb1, 0x18, 0x0b, 0xfc, 0xfb, 0x40, 0xfd, 0xd3, 0xd4, 0xe1, 0xbf, 0x1a, 0xd0, 0x7a,
	0x6c, 0xd4, 0x91, 0x7b, 0x50, 0x91, 0xb1, 0x63, 0x0d, 0xac, 0xed, 0xde, 0x87, 0xbd, 0x5d, 0xa5,
	0x75, 0x57, 0xf1, 0x4e, 0xe6, 0x31, 0xdd, 0xab, 0x7d, 0xfd, 0xf7, 0xbb, 0x6b, 0x6e, 0x45, 0xc6,
	0x64, 0x07, 0x5a, 0xf2, 0x34, 0xf2, 0xd2, 0xc0, 0xe7, 0x4e, 0x65, 0x60, 0x6d, 0x77, 0x3e, 0xec,
	0x6b, 0xec, 0x89, 0x7f, 0x1a, 0xd1, 0xe3, 0xc0, 0xe7, 0x6e, 0x53, 0x9e, 0x46, 0xea, 0x8f, 0xc2,
	0xb2, 0xf0, 0x42, 0x63, 0xab, 0x45, 0xec, 0x21, 0x0f, 0xe9, 0x85, 0xc6, 0xb2, 0x10, 0xff, 0x90,
	0x6f, 0x41, 0x3b, 0xa5, 0x11, 0x0d, 0x24, 0x13, 0xdc, 0xa9, 0x15, 0xc1, 0xc7, 0x19, 0xd9, 0x5d,
	0x20, 0xc8, 0x47, 0xd0, 0xf1, 0xc7, 0xe3, 0x84, 0x8e, 0x7d, 0x14, 0xa8, 0xa3, 0xc0, 0x86, 0x16,
	0xf8, 0x6c, 0xc1, 0x70, 0x8b, 0x28, 0x72, 0x07, 0x6a, 0x52, 0xc4, 0xcf, 0x9d, 0x06, 0xa2, 0xc1,
	0xd8, 0x2d, 0xe2, 0xe7, 0x2e, 0xd2, 0xc9, 0x3b, 0x50, 0x8f, 0xd8, 0x94, 0x49, 0xa7, 0x89, 0x80,
	0x8e, 0x06, 0x3c, 0x53, 0x24, 0x57, 0x73, 0xc8, 0x3e, 0x6c, 0xd0, 0x8b, 0x60, 0xe2, 0xf3, 0x31,
	0xf5, 0x12, 0x1a, 0x50, 0xf6, 0x53, 0x9a, 0x38, 0x2d, 0x84, 0x6f, 0x65, 0x3e, 0xd3, 0x6c, 0xd7,
	0x70, 0x5d, 0x9b, 0x5e, 0xa2, 0x28, 0x3b, 0x5e, 0x08, 0xc6, 0x9d, 0x76, 0xd1, 0x8e, 0x27, 0x82,
	0x71, 0x17, 0xe9, 0xe4, 0x2e, 0x74, 0xb2, 0x20, 0x7b, 0x2c, 0x74, 0x60, 0x60, 0x6d, 0xb7, 0x5d,
	0xc8, 0x48, 0x87, 0xa1, 0x52, 0x70, 0xc6, 0xa2, 0xc8, 0xe9, 0x14, 0x15, 0x3c, 0x65, 0x51, 0xe4,
	0x22, 0x9d, 0x7c, 0x1f, 0xfa, 0xb9, 0x95, 0x29, 0xe5, 0x21, 0x4d, 0x9c, 0x2e, 0x42, 0x37, 0x97,
	0x6d, 0x3c, 0x46, 0x9e, 0xdb, 0xa3, 0x4b, 0x6b, 0xf2, 0x10, 0xe0, 0x28, 0x11, 0x2f, 0x4c, 0x30,
	0xd6, 0x51, 0xd2, 0xd6, 0x92, 0x0b, 0xba, 0x5b, 0xc0, 0x90, 0x27, 0xb0, 0x19, 0xfb, 0x89, 0x64,
	0x6a, 0xe1, 0x49, 0x75, 0x13, 0x74, 0xd4, 0x7b, 0x28, 0xeb, 0x18, 0xd9, 0x0c, 0xb1, 0xb8, 0x2a,
	0x24, 0x2e, 0xd1, 0xd4, 0xe1, 0x52, 0x91, 0x48, 0xa7, 0x5f, 0x3c, 0xdc, 0xb1, 0x48, 0xa4, 0x8b,
	0x74, 0x72, 0x0f, 0x1a, 0xe7, 0x8c, 0x87, 0xe2, 0xdc, 0xb1, 0x11, 0xd1, 0xd5, 0x88, 0x9f, 0x20,
	0xcd, 0x35, 0x3c, 0xf2, 0x1c, 0xde, 0x19, 0x31, 0x4e, 0xbd, 0x71, 0xe2, 0x33, 0x4e, 0x43, 0x2f,
	0x9d, 0xcc, 0x46, 0x23, 0x65, 0x96, 0x4c, 0xa8, 0x3f, 0xf5, 0x02, 0x31, 0xe3, 0xd2, 0xd9, 0x18,
	0x58, 0xdb, 0x35, 0x73, 0xb9, 0x6f, 0x2b, 0xf8, 0xe7, 0x1a, 0x7d, 0xac, 0xc1, 0xc7, 0x88, 0xdd,
	0x57, 0x50, 0xf2, 0x04, 0xee, 0xae, 0xd4, 0x77, 0xea, 0xcb, 0x60, 0xe2, 0xa5, 0xec, 0x15, 0x75,
	0x48, 0x41, 0xdb, 0xdb, 0x65, 0x6d, 0x7b, 0x0a, 0x79, 0xcc, 0x5e, 0xd1, 0xe1, 0x6f, 0x2b, 0xd0,
	0x5b, 0x0e, 0x01, 0xd9, 0x2e, 0x24, 0x1f, 0x59, 0x0e, 0x52, 0x29, 0x01, 0x37, 0x28, 0x0f, 0x44,
	0x48, 0x43, 0x4f, 0xfa, 0xe9, 0x99, 0x37, 0xa5, 0xd2, 0x77, 0x2a, 0x83, 0xea, 0x76, 0xd7, 0xed,
	0x1b, 0xc6, 0x89, 0x9f, 0x9e, 0x7d, 0x49, 0xa5, 0x4f, 0x3e, 0x80, 0xde, 0x22, 0x2c, 0x67, 0x74,
	0x9e, 0x3a, 0xd5, 0x41, 0x75, 0xe1, 0xd4, 0xc7, 0x17, 0x71, 0xe2, 0xae, 0xe7, 0x88, 0xa7, 0x74,
	0x9e, 0x92, 0x7b, 0x50, 0x0f, 0x26, 0x2c, 0x0a, 0x4d, 0x0e, 0x16, 0x0a, 0x81, 0xba, 0x7b, 0xae,
	0x66, 0x92, 0xfb, 0x50, 0x97, 0xf3, 0x98, 0xa6, 0x4e, 0x1d, 0xf5, 0x99, 0x4c, 0x3d, 0x60, 0x34,
	0x0a, 0x95, 0xb9, 0xae, 0xe6, 0x92, 0xef, 0x42, 0xdf, 0x8f, 0x22, 0x6f, 0xa4, 0xe8, 0x9e, 0x16,
	0x68, 0xac, 0x16, 0x58, 0xf7, 0xa3, 0x28, 0x5f, 0xa5, 0xc3, 0x5f, 0x59, 0x60, 0x5f, 0x4e, 0xa4,
	0xd5, 0x27, 0xb7, 0x56, 0x9f, 0xfc, 0x21, 0x74, 0x8a, 0xbb, 0x56, 0x56, 0xef, 0x0a, 0xa3, 0x7c,
	0x4b, 0x32, 0xc4, 0x08, 0x54, 0xaf, 0x8a, 0x80, 0xf2, 0xfd, 0xf0, 0x17, 0x55, 0x68, 0x2f, 0x2e,
	0xea, 0x5d, 0x68, 0xe9, 0xab, 0xce, 0x42, 0x8c, 0x5c, 0xd5, 0x44, 0xa9, 0x89, 0xd4, 0xc3, 0x90,
	0xec, 0x40, 0x33, 0x10, 0xd1, 0x6c, 0xca, 0x33, 0x03, 0x4c, 0x12, 0xed, 0x23, 0xf1, 0x90, 0x8f,
	0x84, 0x9b, 0x01, 0x88, 0x03, 0xb5, 0x90, 0xa6, 0x01, 0x1a, 0xd0, 0x32, 0x8a, 0x90, 0x42, 0xde,
	0x07, 0x12, 0x27, 0x6c, 0xea, 0x27, 0x73, 0x4f, 0x83, 0x3d, 0x16, 0xa6, 0x4e, 0x6d, 0x50, 0xdd,
	0xae, 0xba, 0xb6, 0xe1, 0x18, 0x8d, 0x61, 0x4a, 0x3e, 0x05, 0x9b, 0xd3, 0x0b, 0xe9, 0x25, 0xd4,
	0x0f, 0x3d, 0xca, 0xc7, 0x8c, 0x53, 0xac, 0x8e, 0xbd, 0x6c, 0xf3, 0xc7, 0x48, 0x2b, 0x5c, 0xaa,
	0x9e, 0xc2, 0xbb, 0xd4, 0x0f, 0x35, 0x87, 0xbc, 0x0f, 0x8d, 0x44, 0x9d, 0x3a, 0x8b, 0x95, 0xb9,
	0x02, 0x4f, 0xe9, 0xdc, 0x55, 0x64, 0x23, 0x65, 0x30, 0xe4, 0x13, 0xb8, 0x99, 0x59, 0x17, 0x27,
	0x74, 0xc4, 0x2e, 0x8a, 0x46, 0x36, 0xd1, 0xc8, 0x2d, 0x03, 0x38, 0x42, 0xfe, 0xc2, 0xd4, 0xdb,
	0x00, 0x67, 0x94, 0xc6, 0x9e, 0x48, 0x42, 0x53, 0x44, 0x5b, 0x6e, 0x5b, 0x51, 0xbe, 0x52, 0x04,
	0x32, 0x80, 0x2e, 0x4b, 0xbd, 0x91, 0x9f, 0x4a, 0x5d, 0x4b, 0xda, 0x08, 0x00, 0x96, 0x1e, 0xf8,
	0xa9, 0x54, 0x01, 0x18, 0xfe, 0xa1, 0x02, 0xa4, 0x5c, 0x54, 0xfe, 0x37, 0xe3, 0x72, 0xad, 0x9f,
	0xea, 0xd7, 0xfa, 0xe9, 0x1b, 0xb0, 0xc8, 0x51, 0x84, 0x37, 0x10, 0xde, 0xcd, 0x89, 0x0a, 0x74,
	0xd9, 0x5b, 0xcd, 0x92, 0xb7, 0xfe, 0x5d, 0x83, 0x9a, 0x6a, 0x32, 0xe4, 0x03, 0x68, 0xab, 0x36,
	0x83, 0xa9, 0xb1, 0xdc, 0xef, 0x15, 0xbb, 0x70, 0x33, 0x5a, 0x2f, 0xcc, 0x9a, 0xfc, 0x00, 0x7a,
	0x28, 0xa2, 0x7a, 0x90, 0x96, 0xab, 0x14, 0x13, 0x45, 0xc9, 0x5d, 0x9a, 0x15, 0xba, 0x2f, 0x0a,
	0x34, 0x35, 0x09, 0x60, 0xe1, 0x48, 0x28, 0x37, 0x25, 0xe8, 0x72, 0x61, 0xc9, 0xf9, 0xe4, 0x1d,
	0x68, 0x33, 0xce, 0xa9, 0x6a, 0x7d, 0x17, 0x58, 0x85, 0xb2, 0xf8, 0xb5, 0x90, 0x7c, 0x18, 0x5e,
	0x90, 0x87, 0xd0, 0x8b, 0xe8, 0x48, 0x7a, 0x68, 0x13, 0xd6, 0xb5, 0x7a, 0xa9, 0xae, 0x75, 0x15,
	0x42, 0x19, 0x86, 0x65, 0xed, 0x43, 0xe8, 0x27, 0x6c, 0x3c, 0x29, 0x8a, 0x34, 0xca, 0xa5, 0x10,
	0x21, 0xb9, 0xcc, 0x43, 0xe8, 0xc4, 0x89, 0x38, 0xa5, 0xa6, 0x86, 0x34, 0xaf, 0xa8, 0x21, 0x88,
	0xd1, 0x35, 0xe4, 0x21, 0x74, 0x4e, 0x67, 0x2c, 0xaf, 0x3a, 0xad, 0x2b, 0x24, 0x10, 0xa3, 0x25,
	0x3e, 0x82, 0x3e, 0x9e, 0x24, 0x10, 0x3c, 0xc4, 0x58, 0xa6, 0x4e, 0xbb, 0x64, 0x17, 0x1e, 0x76,
	0x3f, 0x47, 0x90, 0xef, 0x80, 0xad, 0x0f, 0x53, 0x90, 0x82, 0x92, 0x94, 0x3e, 0xf0, 0xb2, 0x98,
	0x90, 0x13, 0x9a, 0x14, 0xc5, 0x3a, 0x65, 0x31, 0xc4, 0x14, 0xc4, 0xbe, 0x80, 0xb7, 0xb5, 0x18,
	0x7d, 0x59, 0x90, 0xf4, 0x46, 0x89, 0x98, 0x7a, 0x8c, 0x3b, 0xdd, 0x92, 0x86, 0xb7, 0x10, 0xfe,
	0xf8, 0xe5, 0x42, 0xc7, 0x41, 0x22, 0xa6, 0x87, 0x7c, 0xf8, 0x57, 0x0b, 0xda, 0xf9, 0xe8, 0xf7,
	0xdf, 0xd3, 0xf4, 0x2e, 0xb4, 0x98, 0x42, 0x2b, 0x40, 0xa5, 0x08, 0x40, 0xea, 0x72, 0x1e, 0x57,
	0xdf, 0x34, 0x8f, 0x6b, 0xa5, 0x3c, 0xde, 0x82, 0xc6, 0x8c, 0xb3, 0x97, 0x33, 0x5d, 0x27, 0x5b,
	0xae, 0x59, 0x5d, 0x91, 0xdf, 0x8d, 0xd5, 0xf9, 0x3d, 0xfc, 0xa5, 0x05, 0xed, 0x7c, 0x52, 0x25,
	0x3b, 0x00, 0x05, 0x27, 0x5b, 0x25, 0x17, 0x15, 0xb8, 0xe4, 0xdb, 0xd0, 0x4b, 0x62, 0x5e, 0x0c,
	0x8a, 0x2e, 0x4a, 0xeb, 0x1a, 0xef, 0xc6, 0xdc, 0x5c, 0xce, 0x98, 0x17, 0xa2, 0x92, 0xf7, 0xe9,
	0xea, 0x35, 0x7d, 0x7a, 0xf8, 0x33, 0xab, 0x38, 0xca, 0x91, 0x01, 0xd4, 0xd5, 0x3b, 0x61, 0x95,
	0x45, 0x9a, 0x41, 0x76, 0xa0, 0xad, 0x8c, 0xd1, 0xa8, 0x95, 0x76, 0xb4, 0x12, 0xfd, 0xe7, 0x4d,
	0x4d, 0xf8, 0x79, 0x05, 0x3a, 0x85, 0x89, 0x9c, 0xdc, 0x87, 0xd6, 0x38, 0x11, 0xb3, 0xd8, 0x3b,
	0x9d, 0xaf, 0x30, 0xa3, 0x89, 0xbc, 0xbd, 0x39, 0x79, 0x00, 0x5d, 0x65, 0x48, 0x0e, 0xad, 0xad,
	0xb2, 0x05, 0x92, 0x98, 0x7f, 0x6e, 0x04, 0xee, 0x43, 0xcb, 0x1f, 0x8f, 0xbd, 0xd1, 0x8c, 0x07,
	0xc6, 0xf0, 0x25, 0xbd, 0xfe, 0x78, 0x7c, 0x30, 0xe3, 0x41, 0xa6, 0x37, 0x87, 0xd6, 0xaf, 0xd2,
	0xfb, 0x99, 0x11, 0x18, 0x40, 0x4b, 0xcf, 0x8c, 0x34, 0x5c, 0x6a, 0x02, 0x39, 0x75, 0xe1, 0x87,
	0xc6, 0x75, 0x7e, 0x78, 0x09, 0x35, 0xf5, 0xd4, 0x20, 0xef, 0x42, 0x0b, 0x1b, 0xde, 0xe2, 0xfc,
	0x66, 0x80, 0xdd, 0x9b, 0x1f, 0x4a, 0x3a, 0x75, 0x9b, 0xc8, 0xdd, 0x9b, 0x93, 0x5b, 0xd9, 0x6b,
	0xa4, 0x52, 0x98, 0x2b, 0xcd, 0x33, 0xe4, 0xcd, 0x5c, 0x7f, 0x08, 0x75, 0x7c, 0xbc, 0x2c, 0x54,
	0x59, 0xd7, 0xa8, 0xaa, 0x5c, 0xa7, 0xea, 0x53, 0xa8, 0xa9, 0xf7, 0x05, 0xf9, 0x7f, 0x68, 0x04,
	0x82, 0xf3, 0xc3, 0x47, 0x4b, 0xaa, 0x0c, 0x4d, 0xed, 0xf3, 0x72, 0x46, 0x93, 0x39, 0xea, 0xca,
	0x1c, 0xa5, 0x49, 0xc3, 0x3f, 0x55, 0xc0, 0xc9, 0xb4, 0xea, 0x5f, 0x26, 0xf8, 0xf1, 0x6c, 0xaa,
	0xd2, 0x48, 0x8d, 0x76, 0x92, 0x4d, 0xa9, 0x17, 0x27, 0x22, 0xa0, 0x69, 0x4a, 0x43, 0x0f, 0xd3,
	0xc6, 0xda, 0xae, 0xb9, 0x7d, 0xc5, 0x38, 0xca, 0xe8, 0xcf, 0xd5, 0x15, 0xdd, 0xe0, 0xb3, 0xa9,
	0x82, 0x86, 0xb3, 0x80, 0x86, 0x5e, 0x22, 0xce, 0x53, 0xed, 0x23, 0xb7, 0xcf, 0x67, 0xd3, 0x23,
	0x43, 0x77, 0xc5, 0x79, 0x4a, 0xee, 0x43, 0x4f, 0x61, 0x99, 0xa4, 0x89, 0xaf, 0x73, 0xab, 0x8a,
	0xc0, 0x75, 0x3e, 0x9b, 0x1e, 0xe6, 0xc4, 0xcb, 0x0f, 0xae, 0x5a, 0xe9, 0xc1, 0x35, 0x80, 0x4e,
	0x20, 0x78, 0x30, 0x4b, 0x12, 0xca, 0x83, 0x39, 0x16, 0x8a, 0x9a, 0x5b, 0x24, 0x91, 0x67, 0xb0,
	0x29, 0xd9, 0x28, 0xf2, 0xd3, 0x09, 0xf6, 0x5f, 0x95, 0xce, 0x92, 0x5e, 0x48, 0x73, 0x27, 0xcc,
	0x0b, 0xe8, 0x84, 0x1d, 0x28, 0x84, 0x2a, 0x7f, 0xfb, 0x9a, 0xff, 0xc5, 0x9a, 0x4b, 0x8c, 0x5c,
	0x81, 0xba, 0xd7, 0x05, 0x78, 0x44, 0xa5, 0xcf, 0x22, 0x55, 0xc4, 0x86, 0x7f, 0xa9, 0x02, 0x29,
	0x8b, 0x92, 0xef, 0xc1, 0x2d, 0x29, 0xa4, 0x1f, 0x79, 0xe1, 0x74, 0xc4, 0xcc, 0x8b, 0x4b, 0x3d,
	0x4d, 0x62, 0x3f, 0x38, 0xcb, 0xbc, 0xf7, 0x16, 0x22, 0x1e, 0x21, 0xe0, 0x58, 0xf3, 0x8f, 0x14,
	0xbb, 0x2c, 0x7c, 0xc6, 0xe2, 0x38, 0x17, 0xae, 0x94, 0x85, 0x35, 0x5f, 0x0b, 0x7f, 0x02, 0x37,
	0x57, 0xee, 0x8c, 0xa1, 0xd0, 0x1e, 0xde, 0x2a, 0x6f, 0x8c, 0x11, 0x29, 0x89, 0x9a, 0x7d, 0x51,
	0xb4, 0x56, 0x16, 0xd5, 0x6c, 0x14, 0xfd, 0x11, 0xbc, 0xb7, 0x24, 0x9a, 0x88, 0xd9, 0x78, 0xe2,
	0xa5, 0x54, 0x7a, 0xba, 0x4d, 0x44, 0xc2, 0x0f, 0x3d, 0xbc, 0x46, 0xd3, 0xd4, 0x84, 0x68, 0x58,
	0x50, 0xe5, 0x2a, 0xf8, 0x31, 0x95, 0xd8, 0x81, 0x9e, 0x09, 0x3f, 0x3c, 0x61, 0x53, 0xfa, 0x65,
	0x4a, 0x3e, 0xbe, 0x64, 0x11, 0x4e, 0xce, 0x99, 0x9a, 0x06, 0xaa, 0xb9, 0x51, 0x54, 0x43, 0x73,
	0xc9, 0x4f, 0xe1, 0xb6, 0x96, 0x0c, 0x12, 0xea, 0x4b, 0xea, 0xa5, 0xdc, 0x8f, 0xd3, 0x89, 0x90,
	0xb9, 0x74, 0x13, 0xa5, 0xb5, 0xfa, 0x7d, 0xc4, 0x1c, 0x1b, 0x88, 0xd6, 0x30, 0x7c, 0x05, 0x35,
	0xf5, 0xb2, 0x25, 0xdf, 0x84, 0xe6, 0x29, 0xa6, 0x7f, 0xba, 0xba, 0x26, 0x18, 0x26, 0xb9, 0x07,
	0xeb, 0x2c, 0xc5, 0x91, 0xd7, 0x8f, 0x94, 0xa0, 0x4e, 0x34, 0x77, 0x99, 0xf8, 0x86, 0xd5, 0xe1,
	0xf7, 0x16, 0xd8, 0xfa, 0xd1, 0x7c, 0x90, 0xf8, 0x53, 0xba, 0x27, 0x66, 0x3c, 0x24, 0x0f, 0xa0,
	0x56, 0x18, 0x0b, 0x6f, 0x14, 0x9f, 0xd6, 0x08, 0x28, 0x4c, 0x78, 0x08, 0x24, 0x43, 0x68, 0xcf,
	0xf8, 0xa9, 0x62, 0xd1, 0x70, 0x29, 0xed, 0x17, 0x64, 0xd5, 0x61, 0xc5, 0x68, 0x94, 0x52, 0x69,
	0xee, 0x86, 0x59, 0x91, 0x6d, 0x68, 0x07, 0x7e, 0x14, 0xa8, 0x32, 0x9b, 0x9a, 0x02, 0x5f, 0xac,
	0xd9, 0x0b, 0xe6, 0xf0, 0xd7, 0x16, 0x74, 0x0a, 0xb6, 0x5e, 0x67, 0x26, 0x02, 0x4a, 0x66, 0xbe,
	0x0f, 0xf5, 0x54, 0xfa, 0xc6, 0x61, 0xf9, 0xb7, 0x9a, 0xcb, 0xc7, 0x77, 0x35, 0x88, 0x6c, 0x43,
	0x95, 0xf2, 0xcc, 0x7d, 0x57, 0x61, 0x15, 0x64, 0xf8, 0x37, 0x0b, 0x1a, 0x9a, 0x43, 0xde, 0x85,
	0xb6, 0xea, 0x28, 0x1e, 0x8e, 0x19, 0xe5, 0xce, 0xd6, 0x52, 0xcc, 0x47, 0x6a, 0xe0, 0x78, 0x00,
	0x8b, 0xd1, 0x5d, 0x75, 0x81, 0xca, 0x8a, 0x88, 0x77, 0x72, 0xc4, 0xde, 0x7c, 0xa9, 0x65, 0x54,
	0xaf, 0x6b, 0x19, 0xef, 0x42, 0x7d, 0xa4, 0x0c, 0x34, 0x8f, 0xf7, 0x8d, 0x92, 0xe5, 0xae, 0xe6,
	0x2f, 0x6e, 0x48, 0xfd, 0x9a, 0x1b, 0xb2, 0xf3, 0xbb, 0x8a, 0xfe, 0x3c, 0x88, 0x23, 0xfc, 0x06,
	0xac, 0xab, 0xdf, 0xfc, 0x99, 0x65, 0xaf, 0x65, 0xa4, 0x7c, 0xa4, 0xb3, 0xad, 0x8c, 0x94, 0x4f,
	0x42, 0x76, 0x85, 0xfc, 0x1f, 0xf4, 0x15, 0xa9, 0x30, 0x03, 0xd8, 0x55, 0xd2, 0x85, 0x16, 0x6a,
	0x13, 0xf1, 0x73, 0xbb, 0x46, 0xd6, 0xa1, 0xad, 0x56, 0xd8, 0xac, 0xec, 0x7a, 0xae, 0x04, 0x1b,
	0xec, 0x67, 0xe3, 0xb1, 0xdd, 0xc8, 0xf0, 0x6a, 0x36, 0xb7, 0x9b, 0xd9, 0x4a, 0x75, 0x24, 0xbb,
	0x45, 0xb6, 0x80, 0xa8, 0xd5, 0xf2, 0x17, 0x15, 0xbb, 0x4d, 0x1c, 0xd8, 0x2c, 0xd2, 0xb3, 0xef,
	0x08, 0x36, 0x10, 0x02, 0x3d, 0xc5, 0x59, 0x4c, 0x46, 0x76, 0x87, 0xdc, 0x82, 0x2d, 0xa4, 0x95,
	0xde, 0x93, 0x76, 0x37, 0xdb, 0x4f, 0x25, 0x97, 0xbd, 0x4e, 0x7a, 0x00, 0x6a, 0xa5, 0xdd, 0x6a,
	0xf7, 0x76, 0x3e, 0x86, 0x6e, 0xf1, 0x4b, 0x01, 0xe9, 0x43, 0xe7, 0xc8, 0x4f, 0xd3, 0x93, 0x09,
	0x16, 0x28, 0x7b, 0x4d, 0x1d, 0x6f, 0x2f, 0x11, 0x7e, 0x18, 0xf8, 0xa9, 0xb4, 0x2d, 0xd2, 0x82,
	0xda, 0x17, 0x7e, 0x3a, 0xb1, 0x2b, 0x3b, 0xbb, 0x00, 0x8b, 0xe7, 0x38, 0x69, 0x43, 0xfd, 0x99,
	0x08, 0xfc, 0xc8, 0x5e, 0x53, 0x90, 0x13, 0xf6, 0xf4, 0xc7, 0xb6, 0x45, 0x3a, 0xd0, 0x34, 0xa5,
	0xdf, 0xae, 0xec, 0xfc, 0xd1, 0x82, 0x56, 0xf6, 0x46, 0x5b, 0x78, 0x9f, 0xd3, 0x04, 0xfd, 0xb2,
	0x46, 0x6e, 0xc0, 0x06, 0xfa, 0x91, 0x8e, 0xe4, 0x57, 0x33, 0x69, 0xc8, 0x56, 0xe6, 0x20, 0x57,
	0xbd, 0x07, 0x16, 0xf4, 0x0a, 0xb1, 0xa1, 0xab, 0x83, 0x35, 0x65, 0x48, 0xa9, 0x92, 0x4d, 0xb0,
	0x31, 0x56, 0x5c, 0xb2, 0x9c, 0x5a, 0x23, 0x37, 0xe1, 0xc6, 0x92, 0xda, 0x9c, 0x55, 0x27, 0xb7,
	0xe1, 0x66, 0x26, 0x50, 0x66, 0x37, 0x76, 0x06, 0xd0, 0x2d, 0xbe, 0x0d, 0xb3, 0x1d, 0xd5, 0xf1,
	0xb5, 0xc9, 0x3b, 0x3f, 0x84, 0xfe, 0xa5, 0xf2, 0xa2, 0xdc, 0x75, 0x20, 0xa2, 0x48, 0x9c, 0x33,
	0x3e, 0xd6, 0xde, 0x3b, 0x4a, 0x68, 0x40, 0x43, 0xb5, 0xb4, 0x94, 0xf7, 0xf7, 0xb1, 0xe9, 0x4a,
	0x57, 0x9c, 0xdb, 0x95, 0x9d, 0x8f, 0x32, 0x05, 0x79, 0xe2, 0x2b, 0xef, 0xa9, 0x86, 0x61, 0xaf,
	0x11, 0x80, 0x06, 0x7e, 0xb4, 0x48, 0x6d, 0x4b, 0xfd, 0xc7, 0x59, 0x31, 0xb5, 0x2b, 0x7b, 0xef,
	0x7d, 0xfd, 0xfa, 0x8e, 0xf5, 0xe7, 0xd7, 0x77, 0xac, 0x7f, 0xbc, 0xbe, 0x63, 0xfd, 0xe6, 0x9f,
	0x77, 0xd6, 0xe0, 0x46, 0x20, 0xa6, 0xbb, 0x31, 0xe3, 0xe3, 0xc0, 0x8f, 0x77, 0x25, 0x0b, 0x4f,
	0x31, 0x25, 0x8e, 0xac, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x6a, 0x04, 0x99, 0x70, 0x17,
	0x00, 0x00,
}

func (m *Executor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Executor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Executor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i = encodeVarintExecutor(dAtA, i, uint64(m.FineGrainedShuffleBatchSize))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x90
	i = encodeVarintExecutor(dAtA, i, uint64(m.FineGrainedShuffleStreamCount))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	if m.Window != nil {
		{
			size, err := m.Window.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Sort != nil {
		{
			size, err := m.Sort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.PartitionTableScan != nil {
		{
			size, err := m.PartitionTableScan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Projection != nil {
		{
			size, err := m.Projection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.ExchangeSender != nil {
		{
			size, err := m.ExchangeSender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Kill != nil {
		{
			size, err := m.Kill.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ExecutorId != nil {
		i -= len(*m.ExecutorId)
		copy(dAtA[i:], *m.ExecutorId)
		i = encodeVarintExecutor(dAtA, i, uint64(len(*m.ExecutorId)))
		i--
		dAtA[i] = 0x52
	}
	if m.Join != nil {
		{
			size, err := m.Join.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ExchangeReceiver != nil {
		{
			size, err := m.ExchangeReceiver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Limit != nil {
		{
			size, err := m.Limit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.TopN != nil {
		{
			size, err := m.TopN.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Aggregation != nil {
		{
			size, err := m.Aggregation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Selection != nil {
		{
			size, err := m.Selection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IdxScan != nil {
		{
			size, err := m.IdxScan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TblScan != nil {
		{
			size, err := m.TblScan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintExecutor(dAtA, i, uint64(m.Tp))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ExchangeSender) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeSender) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeSender) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AllFieldTypes) > 0 {
		for iNdEx := len(m.AllFieldTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllFieldTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Types[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Child != nil {
		{
			size, err := m.Child.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.PartitionKeys) > 0 {
		for iNdEx := len(m.PartitionKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PartitionKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.EncodedTaskMeta) > 0 {
		for iNdEx := len(m.EncodedTaskMeta) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EncodedTaskMeta[iNdEx])
			copy(dAtA[i:], m.EncodedTaskMeta[iNdEx])
			i = encodeVarintExecutor(dAtA, i, uint64(len(m.EncodedTaskMeta[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintExecutor(dAtA, i, uint64(m.Tp))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ExchangeReceiver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeReceiver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeReceiver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Tp != nil {
		i = encodeVarintExecutor(dAtA, i, uint64(*m.Tp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FieldTypes) > 0 {
		for iNdEx := len(m.FieldTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FieldTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.EncodedTaskMeta) > 0 {
		for iNdEx := len(m.EncodedTaskMeta) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EncodedTaskMeta[iNdEx])
			copy(dAtA[i:], m.EncodedTaskMeta[iNdEx])
			i = encodeVarintExecutor(dAtA, i, uint64(len(m.EncodedTaskMeta[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TableScan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableScan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableScan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsFastScan != nil {
		i--
		if *m.IsFastScan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.KeepOrder != nil {
		i--
		if *m.KeepOrder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.PrimaryPrefixColumnIds) > 0 {
		for iNdEx := len(m.PrimaryPrefixColumnIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintExecutor(dAtA, i, uint64(m.PrimaryPrefixColumnIds[iNdEx]))
			i--
			dAtA[i] = 0x38
		}
	}
	if len(m.Ranges) > 0 {
		for iNdEx := len(m.Ranges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ranges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	i = encodeVarintExecutor(dAtA, i, uint64(m.NextReadEngine))
	i--
	dAtA[i] = 0x28
	if len(m.PrimaryColumnIds) > 0 {
		for iNdEx := len(m.PrimaryColumnIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintExecutor(dAtA, i, uint64(m.PrimaryColumnIds[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	i--
	if m.Desc {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	if len(m.Columns) > 0 {
		for iNdEx := len(m.Columns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Columns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintExecutor(dAtA, i, uint64(m.TableId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *PartitionTableScan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionTableScan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionTableScan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsFastScan != nil {
		i--
		if *m.IsFastScan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.PartitionIds) > 0 {
		for iNdEx := len(m.PartitionIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintExecutor(dAtA, i, uint64(m.PartitionIds[iNdEx]))
			i--
			dAtA[i] = 0x30
		}
	}
	if len(m.PrimaryPrefixColumnIds) > 0 {
		for iNdEx := len(m.PrimaryPrefixColumnIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintExecutor(dAtA, i, uint64(m.PrimaryPrefixColumnIds[iNdEx]))
			i--
			dAtA[i] = 0x28
		}
	}
	if len(m.PrimaryColumnIds) > 0 {
		for iNdEx := len(m.PrimaryColumnIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintExecutor(dAtA, i, uint64(m.PrimaryColumnIds[iNdEx]))
			i--
			dAtA[i] = 0x20
		}
	}
	i--
	if m.Desc {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	if len(m.Columns) > 0 {
		for iNdEx := len(m.Columns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Columns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	i = encodeVarintExecutor(dAtA, i, uint64(m.TableId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Join) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Join) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Join) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OtherEqConditionsFromIn) > 0 {
		for iNdEx := len(m.OtherEqConditionsFromIn) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OtherEqConditionsFromIn[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.OtherConditions) > 0 {
		for iNdEx := len(m.OtherConditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OtherConditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.RightConditions) > 0 {
		for iNdEx := len(m.RightConditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RightConditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.LeftConditions) > 0 {
		for iNdEx := len(m.LeftConditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LeftConditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.BuildTypes) > 0 {
		for iNdEx := len(m.BuildTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuildTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ProbeTypes) > 0 {
		for iNdEx := len(m.ProbeTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProbeTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RightJoinKeys) > 0 {
		for iNdEx := len(m.RightJoinKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RightJoinKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.LeftJoinKeys) > 0 {
		for iNdEx := len(m.LeftJoinKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LeftJoinKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i = encodeVarintExecutor(dAtA, i, uint64(m.InnerIdx))
	i--
	dAtA[i] = 0x20
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Children[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintExecutor(dAtA, i, uint64(m.JoinExecType))
	i--
	dAtA[i] = 0x10
	i = encodeVarintExecutor(dAtA, i, uint64(m.JoinType))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *IndexScan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexScan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexScan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PrimaryColumnIds) > 0 {
		for iNdEx := len(m.PrimaryColumnIds) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintExecutor(dAtA, i, uint64(m.PrimaryColumnIds[iNdEx]))
			i--
			dAtA[i] = 0x30
		}
	}
	if m.Unique != nil {
		i--
		if *m.Unique {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	i--
	if m.Desc {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	if len(m.Columns) > 0 {
		for iNdEx := len(m.Columns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Columns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i = encodeVarintExecutor(dAtA, i, uint64(m.IndexId))
	i--
	dAtA[i] = 0x10
	i = encodeVarintExecutor(dAtA, i, uint64(m.TableId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Selection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Selection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Selection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Child != nil {
		{
			size, err := m.Child.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RpnConditions) > 0 {
		for iNdEx := len(m.RpnConditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RpnConditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Projection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Projection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Projection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Child != nil {
		{
			size, err := m.Child.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RpnExprs) > 0 {
		for iNdEx := len(m.RpnExprs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RpnExprs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Exprs) > 0 {
		for iNdEx := len(m.Exprs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Exprs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Aggregation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Aggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Aggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Child != nil {
		{
			size, err := m.Child.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.RpnAggFunc) > 0 {
		for iNdEx := len(m.RpnAggFunc) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RpnAggFunc[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.RpnGroupBy) > 0 {
		for iNdEx := len(m.RpnGroupBy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RpnGroupBy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	i--
	if m.Streamed {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	if len(m.AggFunc) > 0 {
		for iNdEx := len(m.AggFunc) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AggFunc[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GroupBy) > 0 {
		for iNdEx := len(m.GroupBy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupBy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TopN) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopN) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopN) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Child != nil {
		{
			size, err := m.Child.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintExecutor(dAtA, i, uint64(m.Limit))
	i--
	dAtA[i] = 0x10
	if len(m.OrderBy) > 0 {
		for iNdEx := len(m.OrderBy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderBy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Limit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Limit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Limit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Child != nil {
		{
			size, err := m.Child.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintExecutor(dAtA, i, uint64(m.Limit))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Kill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Kill) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Kill) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i--
	if m.Query {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintExecutor(dAtA, i, uint64(m.ConnID))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ExecutorExecutionSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutorExecutionSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutorExecutionSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DetailInfo != nil {
		{
			size := m.DetailInfo.Size()
			i -= size
			if _, err := m.DetailInfo.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Concurrency != nil {
		i = encodeVarintExecutor(dAtA, i, uint64(*m.Concurrency))
		i--
		dAtA[i] = 0x28
	}
	if m.ExecutorId != nil {
		i -= len(*m.ExecutorId)
		copy(dAtA[i:], *m.ExecutorId)
		i = encodeVarintExecutor(dAtA, i, uint64(len(*m.ExecutorId)))
		i--
		dAtA[i] = 0x22
	}
	if m.NumIterations != nil {
		i = encodeVarintExecutor(dAtA, i, uint64(*m.NumIterations))
		i--
		dAtA[i] = 0x18
	}
	if m.NumProducedRows != nil {
		i = encodeVarintExecutor(dAtA, i, uint64(*m.NumProducedRows))
		i--
		dAtA[i] = 0x10
	}
	if m.TimeProcessedNs != nil {
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TimeProcessedNs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExecutorExecutionSummary_TiflashScanContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutorExecutionSummary_TiflashScanContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TiflashScanContext != nil {
		{
			size, err := m.TiflashScanContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *TiFlashScanContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TiFlashScanContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TiFlashScanContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalCreateSnapshotTimeMs != nil {
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalCreateSnapshotTimeMs))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalDmfileReadTimeMs != nil {
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalDmfileReadTimeMs))
		i--
		dAtA[i] = 0x30
	}
	if m.TotalDmfileRoughSetIndexLoadTimeMs != nil {
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalDmfileRoughSetIndexLoadTimeMs))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalDmfileSkippedRows != nil {
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalDmfileSkippedRows))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalDmfileScannedRows != nil {
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalDmfileScannedRows))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalDmfileSkippedPacks != nil {
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalDmfileSkippedPacks))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalDmfileScannedPacks != nil {
		i = encodeVarintExecutor(dAtA, i, uint64(*m.TotalDmfileScannedPacks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Sort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Child != nil {
		{
			size, err := m.Child.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IsPartialSort != nil {
		i--
		if *m.IsPartialSort {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ByItems) > 0 {
		for iNdEx := len(m.ByItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ByItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WindowFrameBound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WindowFrameBound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WindowFrameBound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CalcFuncs) > 0 {
		for iNdEx := len(m.CalcFuncs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CalcFuncs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Offset != nil {
		i = encodeVarintExecutor(dAtA, i, uint64(*m.Offset))
		i--
		dAtA[i] = 0x18
	}
	i--
	if m.Unbounded {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintExecutor(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *WindowFrame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WindowFrame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WindowFrame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.End != nil {
		{
			size, err := m.End.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Start != nil {
		{
			size, err := m.Start.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i = encodeVarintExecutor(dAtA, i, uint64(m.Type))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *Window) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Window) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Window) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Child != nil {
		{
			size, err := m.Child.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Frame != nil {
		{
			size, err := m.Frame.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExecutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrderBy) > 0 {
		for iNdEx := len(m.OrderBy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderBy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PartitionBy) > 0 {
		for iNdEx := len(m.PartitionBy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PartitionBy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FuncDesc) > 0 {
		for iNdEx := len(m.FuncDesc) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FuncDesc[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintExecutor(dAtA []byte, offset int, v uint64) int {
	offset -= sovExecutor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Executor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.Tp))
	if m.TblScan != nil {
		l = m.TblScan.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.IdxScan != nil {
		l = m.IdxScan.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Selection != nil {
		l = m.Selection.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Aggregation != nil {
		l = m.Aggregation.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.TopN != nil {
		l = m.TopN.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Limit != nil {
		l = m.Limit.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.ExchangeReceiver != nil {
		l = m.ExchangeReceiver.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Join != nil {
		l = m.Join.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.ExecutorId != nil {
		l = len(*m.ExecutorId)
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Kill != nil {
		l = m.Kill.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.ExchangeSender != nil {
		l = m.ExchangeSender.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Projection != nil {
		l = m.Projection.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.PartitionTableScan != nil {
		l = m.PartitionTableScan.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Sort != nil {
		l = m.Sort.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Window != nil {
		l = m.Window.Size()
		n += 2 + l + sovExecutor(uint64(l))
	}
	n += 2 + sovExecutor(uint64(m.FineGrainedShuffleStreamCount))
	n += 2 + sovExecutor(uint64(m.FineGrainedShuffleBatchSize))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExchangeSender) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.Tp))
	if len(m.EncodedTaskMeta) > 0 {
		for _, b := range m.EncodedTaskMeta {
			l = len(b)
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.PartitionKeys) > 0 {
		for _, e := range m.PartitionKeys {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if len(m.Types) > 0 {
		for _, e := range m.Types {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.AllFieldTypes) > 0 {
		for _, e := range m.AllFieldTypes {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExchangeReceiver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EncodedTaskMeta) > 0 {
		for _, b := range m.EncodedTaskMeta {
			l = len(b)
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.FieldTypes) > 0 {
		for _, e := range m.FieldTypes {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.Tp != nil {
		n += 1 + sovExecutor(uint64(*m.Tp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableScan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.TableId))
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	n += 2
	if len(m.PrimaryColumnIds) > 0 {
		for _, e := range m.PrimaryColumnIds {
			n += 1 + sovExecutor(uint64(e))
		}
	}
	n += 1 + sovExecutor(uint64(m.NextReadEngine))
	if len(m.Ranges) > 0 {
		for _, e := range m.Ranges {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.PrimaryPrefixColumnIds) > 0 {
		for _, e := range m.PrimaryPrefixColumnIds {
			n += 1 + sovExecutor(uint64(e))
		}
	}
	if m.KeepOrder != nil {
		n += 2
	}
	if m.IsFastScan != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PartitionTableScan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.TableId))
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	n += 2
	if len(m.PrimaryColumnIds) > 0 {
		for _, e := range m.PrimaryColumnIds {
			n += 1 + sovExecutor(uint64(e))
		}
	}
	if len(m.PrimaryPrefixColumnIds) > 0 {
		for _, e := range m.PrimaryPrefixColumnIds {
			n += 1 + sovExecutor(uint64(e))
		}
	}
	if len(m.PartitionIds) > 0 {
		for _, e := range m.PartitionIds {
			n += 1 + sovExecutor(uint64(e))
		}
	}
	if m.IsFastScan != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Join) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.JoinType))
	n += 1 + sovExecutor(uint64(m.JoinExecType))
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	n += 1 + sovExecutor(uint64(m.InnerIdx))
	if len(m.LeftJoinKeys) > 0 {
		for _, e := range m.LeftJoinKeys {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.RightJoinKeys) > 0 {
		for _, e := range m.RightJoinKeys {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.ProbeTypes) > 0 {
		for _, e := range m.ProbeTypes {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.BuildTypes) > 0 {
		for _, e := range m.BuildTypes {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.LeftConditions) > 0 {
		for _, e := range m.LeftConditions {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.RightConditions) > 0 {
		for _, e := range m.RightConditions {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.OtherConditions) > 0 {
		for _, e := range m.OtherConditions {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.OtherEqConditionsFromIn) > 0 {
		for _, e := range m.OtherEqConditionsFromIn {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IndexScan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.TableId))
	n += 1 + sovExecutor(uint64(m.IndexId))
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	n += 2
	if m.Unique != nil {
		n += 2
	}
	if len(m.PrimaryColumnIds) > 0 {
		for _, e := range m.PrimaryColumnIds {
			n += 1 + sovExecutor(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Selection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.RpnConditions) > 0 {
		for _, e := range m.RpnConditions {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Projection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Exprs) > 0 {
		for _, e := range m.Exprs {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.RpnExprs) > 0 {
		for _, e := range m.RpnExprs {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Aggregation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GroupBy) > 0 {
		for _, e := range m.GroupBy {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.AggFunc) > 0 {
		for _, e := range m.AggFunc {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	n += 2
	if len(m.RpnGroupBy) > 0 {
		for _, e := range m.RpnGroupBy {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.RpnAggFunc) > 0 {
		for _, e := range m.RpnAggFunc {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TopN) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrderBy) > 0 {
		for _, e := range m.OrderBy {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	n += 1 + sovExecutor(uint64(m.Limit))
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Limit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.Limit))
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Kill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.ConnID))
	n += 2
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExecutorExecutionSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeProcessedNs != nil {
		n += 1 + sovExecutor(uint64(*m.TimeProcessedNs))
	}
	if m.NumProducedRows != nil {
		n += 1 + sovExecutor(uint64(*m.NumProducedRows))
	}
	if m.NumIterations != nil {
		n += 1 + sovExecutor(uint64(*m.NumIterations))
	}
	if m.ExecutorId != nil {
		l = len(*m.ExecutorId)
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Concurrency != nil {
		n += 1 + sovExecutor(uint64(*m.Concurrency))
	}
	if m.DetailInfo != nil {
		n += m.DetailInfo.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExecutorExecutionSummary_TiflashScanContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TiflashScanContext != nil {
		l = m.TiflashScanContext.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	return n
}
func (m *TiFlashScanContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalDmfileScannedPacks != nil {
		n += 1 + sovExecutor(uint64(*m.TotalDmfileScannedPacks))
	}
	if m.TotalDmfileSkippedPacks != nil {
		n += 1 + sovExecutor(uint64(*m.TotalDmfileSkippedPacks))
	}
	if m.TotalDmfileScannedRows != nil {
		n += 1 + sovExecutor(uint64(*m.TotalDmfileScannedRows))
	}
	if m.TotalDmfileSkippedRows != nil {
		n += 1 + sovExecutor(uint64(*m.TotalDmfileSkippedRows))
	}
	if m.TotalDmfileRoughSetIndexLoadTimeMs != nil {
		n += 1 + sovExecutor(uint64(*m.TotalDmfileRoughSetIndexLoadTimeMs))
	}
	if m.TotalDmfileReadTimeMs != nil {
		n += 1 + sovExecutor(uint64(*m.TotalDmfileReadTimeMs))
	}
	if m.TotalCreateSnapshotTimeMs != nil {
		n += 1 + sovExecutor(uint64(*m.TotalCreateSnapshotTimeMs))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Sort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ByItems) > 0 {
		for _, e := range m.ByItems {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.IsPartialSort != nil {
		n += 2
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WindowFrameBound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.Type))
	n += 2
	if m.Offset != nil {
		n += 1 + sovExecutor(uint64(*m.Offset))
	}
	if len(m.CalcFuncs) > 0 {
		for _, e := range m.CalcFuncs {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WindowFrame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovExecutor(uint64(m.Type))
	if m.Start != nil {
		l = m.Start.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.End != nil {
		l = m.End.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Window) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FuncDesc) > 0 {
		for _, e := range m.FuncDesc {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.PartitionBy) > 0 {
		for _, e := range m.PartitionBy {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if len(m.OrderBy) > 0 {
		for _, e := range m.OrderBy {
			l = e.Size()
			n += 1 + l + sovExecutor(uint64(l))
		}
	}
	if m.Frame != nil {
		l = m.Frame.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.Child != nil {
		l = m.Child.Size()
		n += 1 + l + sovExecutor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovExecutor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExecutor(x uint64) (n int) {
	return sovExecutor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Executor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Executor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Executor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= ExecType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TblScan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TblScan == nil {
				m.TblScan = &TableScan{}
			}
			if err := m.TblScan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdxScan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdxScan == nil {
				m.IdxScan = &IndexScan{}
			}
			if err := m.IdxScan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selection == nil {
				m.Selection = &Selection{}
			}
			if err := m.Selection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aggregation == nil {
				m.Aggregation = &Aggregation{}
			}
			if err := m.Aggregation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopN", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TopN == nil {
				m.TopN = &TopN{}
			}
			if err := m.TopN.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limit == nil {
				m.Limit = &Limit{}
			}
			if err := m.Limit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeReceiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExchangeReceiver == nil {
				m.ExchangeReceiver = &ExchangeReceiver{}
			}
			if err := m.ExchangeReceiver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Join", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Join == nil {
				m.Join = &Join{}
			}
			if err := m.Join.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExecutorId = &s
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kill == nil {
				m.Kill = &Kill{}
			}
			if err := m.Kill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeSender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExchangeSender == nil {
				m.ExchangeSender = &ExchangeSender{}
			}
			if err := m.ExchangeSender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Projection == nil {
				m.Projection = &Projection{}
			}
			if err := m.Projection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionTableScan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PartitionTableScan == nil {
				m.PartitionTableScan = &PartitionTableScan{}
			}
			if err := m.PartitionTableScan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sort == nil {
				m.Sort = &Sort{}
			}
			if err := m.Sort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Window", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Window == nil {
				m.Window = &Window{}
			}
			if err := m.Window.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FineGrainedShuffleStreamCount", wireType)
			}
			m.FineGrainedShuffleStreamCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FineGrainedShuffleStreamCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FineGrainedShuffleBatchSize", wireType)
			}
			m.FineGrainedShuffleBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FineGrainedShuffleBatchSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeSender) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeSender: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeSender: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= ExchangeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedTaskMeta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedTaskMeta = append(m.EncodedTaskMeta, make([]byte, postIndex-iNdEx))
			copy(m.EncodedTaskMeta[len(m.EncodedTaskMeta)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartitionKeys = append(m.PartitionKeys, &Expr{})
			if err := m.PartitionKeys[len(m.PartitionKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, &FieldType{})
			if err := m.Types[len(m.Types)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllFieldTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllFieldTypes = append(m.AllFieldTypes, &FieldType{})
			if err := m.AllFieldTypes[len(m.AllFieldTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeReceiver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeReceiver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeReceiver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedTaskMeta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedTaskMeta = append(m.EncodedTaskMeta, make([]byte, postIndex-iNdEx))
			copy(m.EncodedTaskMeta[len(m.EncodedTaskMeta)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldTypes = append(m.FieldTypes, &FieldType{})
			if err := m.FieldTypes[len(m.FieldTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			var v ExchangeType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ExchangeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tp = &v
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableScan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableScan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableScan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &ColumnInfo{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Desc = bool(v != 0)
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrimaryColumnIds = append(m.PrimaryColumnIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExecutor
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthExecutor
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PrimaryColumnIds) == 0 {
					m.PrimaryColumnIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExecutor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrimaryColumnIds = append(m.PrimaryColumnIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryColumnIds", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextReadEngine", wireType)
			}
			m.NextReadEngine = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextReadEngine |= EngineType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranges = append(m.Ranges, KeyRange{})
			if err := m.Ranges[len(m.Ranges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrimaryPrefixColumnIds = append(m.PrimaryPrefixColumnIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExecutor
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthExecutor
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PrimaryPrefixColumnIds) == 0 {
					m.PrimaryPrefixColumnIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExecutor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrimaryPrefixColumnIds = append(m.PrimaryPrefixColumnIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryPrefixColumnIds", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepOrder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.KeepOrder = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFastScan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsFastScan = &b
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionTableScan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionTableScan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionTableScan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &ColumnInfo{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Desc = bool(v != 0)
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrimaryColumnIds = append(m.PrimaryColumnIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExecutor
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthExecutor
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PrimaryColumnIds) == 0 {
					m.PrimaryColumnIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExecutor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrimaryColumnIds = append(m.PrimaryColumnIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryColumnIds", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrimaryPrefixColumnIds = append(m.PrimaryPrefixColumnIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExecutor
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthExecutor
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PrimaryPrefixColumnIds) == 0 {
					m.PrimaryPrefixColumnIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExecutor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrimaryPrefixColumnIds = append(m.PrimaryPrefixColumnIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryPrefixColumnIds", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PartitionIds = append(m.PartitionIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExecutor
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthExecutor
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PartitionIds) == 0 {
					m.PartitionIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExecutor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PartitionIds = append(m.PartitionIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionIds", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFastScan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsFastScan = &b
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Join) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Join: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Join: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinType", wireType)
			}
			m.JoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinType |= JoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinExecType", wireType)
			}
			m.JoinExecType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinExecType |= JoinExecType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &Executor{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerIdx", wireType)
			}
			m.InnerIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InnerIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftJoinKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeftJoinKeys = append(m.LeftJoinKeys, &Expr{})
			if err := m.LeftJoinKeys[len(m.LeftJoinKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightJoinKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightJoinKeys = append(m.RightJoinKeys, &Expr{})
			if err := m.RightJoinKeys[len(m.RightJoinKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProbeTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProbeTypes = append(m.ProbeTypes, &FieldType{})
			if err := m.ProbeTypes[len(m.ProbeTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildTypes = append(m.BuildTypes, &FieldType{})
			if err := m.BuildTypes[len(m.BuildTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeftConditions = append(m.LeftConditions, &Expr{})
			if err := m.LeftConditions[len(m.LeftConditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightConditions = append(m.RightConditions, &Expr{})
			if err := m.RightConditions[len(m.RightConditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherConditions = append(m.OtherConditions, &Expr{})
			if err := m.OtherConditions[len(m.OtherConditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherEqConditionsFromIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherEqConditionsFromIn = append(m.OtherEqConditionsFromIn, &Expr{})
			if err := m.OtherEqConditionsFromIn[len(m.OtherEqConditionsFromIn)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexScan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexScan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexScan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexId", wireType)
			}
			m.IndexId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &ColumnInfo{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Desc = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unique", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Unique = &b
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrimaryColumnIds = append(m.PrimaryColumnIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExecutor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExecutor
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthExecutor
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PrimaryColumnIds) == 0 {
					m.PrimaryColumnIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExecutor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrimaryColumnIds = append(m.PrimaryColumnIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryColumnIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Selection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Selection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Selection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, &Expr{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpnConditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpnConditions = append(m.RpnConditions, &RpnExpr{})
			if err := m.RpnConditions[len(m.RpnConditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Projection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Projection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Projection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exprs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exprs = append(m.Exprs, &Expr{})
			if err := m.Exprs[len(m.Exprs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpnExprs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpnExprs = append(m.RpnExprs, &RpnExpr{})
			if err := m.RpnExprs[len(m.RpnExprs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Aggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Aggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Aggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupBy = append(m.GroupBy, &Expr{})
			if err := m.GroupBy[len(m.GroupBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggFunc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggFunc = append(m.AggFunc, &Expr{})
			if err := m.AggFunc[len(m.AggFunc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streamed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Streamed = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpnGroupBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpnGroupBy = append(m.RpnGroupBy, &RpnExpr{})
			if err := m.RpnGroupBy[len(m.RpnGroupBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpnAggFunc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpnAggFunc = append(m.RpnAggFunc, &RpnExpr{})
			if err := m.RpnAggFunc[len(m.RpnAggFunc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopN) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopN: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopN: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = append(m.OrderBy, &ByItem{})
			if err := m.OrderBy[len(m.OrderBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Limit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Limit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Limit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Kill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Kill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Kill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnID", wireType)
			}
			m.ConnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Query = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutorExecutionSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutorExecutionSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutorExecutionSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeProcessedNs", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeProcessedNs = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumProducedRows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumProducedRows = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumIterations", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumIterations = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ExecutorId = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Concurrency", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Concurrency = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TiflashScanContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TiFlashScanContext{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DetailInfo = &ExecutorExecutionSummary_TiflashScanContext{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TiFlashScanContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TiFlashScanContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TiFlashScanContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDmfileScannedPacks", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalDmfileScannedPacks = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDmfileSkippedPacks", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalDmfileSkippedPacks = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDmfileScannedRows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalDmfileScannedRows = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDmfileSkippedRows", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalDmfileSkippedRows = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDmfileRoughSetIndexLoadTimeMs", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalDmfileRoughSetIndexLoadTimeMs = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDmfileReadTimeMs", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalDmfileReadTimeMs = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCreateSnapshotTimeMs", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalCreateSnapshotTimeMs = &v
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ByItems = append(m.ByItems, &ByItem{})
			if err := m.ByItems[len(m.ByItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPartialSort", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPartialSort = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WindowFrameBound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WindowFrameBound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WindowFrameBound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= WindowBoundType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unbounded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unbounded = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Offset = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalcFuncs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CalcFuncs = append(m.CalcFuncs, &Expr{})
			if err := m.CalcFuncs[len(m.CalcFuncs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WindowFrame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WindowFrame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WindowFrame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= WindowFrameType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Start == nil {
				m.Start = &WindowFrameBound{}
			}
			if err := m.Start.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.End == nil {
				m.End = &WindowFrameBound{}
			}
			if err := m.End.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Window) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Window: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Window: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuncDesc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuncDesc = append(m.FuncDesc, &Expr{})
			if err := m.FuncDesc[len(m.FuncDesc)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartitionBy = append(m.PartitionBy, &ByItem{})
			if err := m.PartitionBy[len(m.PartitionBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = append(m.OrderBy, &ByItem{})
			if err := m.OrderBy[len(m.OrderBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Frame == nil {
				m.Frame = &WindowFrame{}
			}
			if err := m.Frame.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Child == nil {
				m.Child = &Executor{}
			}
			if err := m.Child.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExecutor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExecutor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExecutor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExecutor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExecutor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExecutor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExecutor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExecutor = fmt.Errorf("proto: unexpected end of group")
)
